(import prelude/basic :unqualified)
(import prelude/bool :unqualified)
(import prelude/dict :unqualified)
(import prelude/set :as 'set)
(import prelude/ref :unqualified)
(import prelude/nonces :unqualified)
(import prelude/validation :as 'validator)
(import prelude/patterns :unqualified)
(import prelude/util :unqualified)
(import prelude/lens :unqualified)
(import prelude/machine-remote '[make-updatable-eval] :unqualified)

(def machine-id
  "The name of this machine."
  "monadic/radicle/diffs")

(def diffs
  "DIFFs are stored in a dict in a ref, keyed by diff-number."
  (ref {}))

(def diff-counter
  "We use a stateful counter for giving diff numbers."
  (make-counter))

(def noncer (make-noncer))

(def set-diffs
  "A helper to set stuff in the diffs ref."
  (fn [l v]
    (set-ref diffs l v)))

(def input-keys
  {:nonce      (noncer :validator)
   :machine-id   (validator/= machine-id)})

(def validator/time-created
  (validator/and
   [(validator/keys
     {;; NOTE that timestamps are claimed by authors, are not verified, and may
      ;; be incorrect.
      :created-at validator/timestamp
      :modified-at validator/timestamp})
    (validator/pred "`:modified-at` and `:create-at` are equal"
                    (fn [t]
                      (eq? (lookup :created-at t)
                           (lookup :modified-at t))))]))

(def validator/time-modified
  (validator/keys
   {:modified-at validator/timestamp}))

(def validator/input
  "Checks that the input as a valid new *machine input*, that is, it has an unused
  nonce, is marked with this machine name, and is signed."
  (validator/and
   [(validator/keys input-keys)
    validator/signed]))

(def validator/diff-number
  "A validator for numbers which refer to existing diffs."
  (validator/pred "Existing diff number" (fn [n] (member? n (read-ref diffs)))))

(def comment-keys
  "A comment's body should be text that isn't too long."
  {:body (validator/string-of-max-length 4000)})

(def validator/full-comment
  (validator/keys comment-keys))

(def validator/diff-reference
  "Refers to an existing issue."
  (validator/optional-keys {:issue-number validator/diff-number}))

(def validator/comment-input
  "A comment input should refer to an existing issue."
  (validator/and
   [validator/input
    validator/time-created
    validator/full-comment
    validator/diff-reference]))

(def diff-keys
  {:title       (validator/string-of-max-length 100)
   :description (validator/string-of-max-length 4000)
   :patch       (validator/type :string)
   :state       (validator/member [:pending :retracted :accepted :rejected])
   :comments    (validator/every validator/full-comment)})

(def validator/full-diff (validator/keys diff-keys))

(def validator/diff-input
  "An diff should have all the required fields, be a signed input, etc."
  (validator/and
   [validator/input
    validator/time-created
    validator/full-diff]))

(def edit-keys
  (fn [ks]
    (<> ks
        (<> (keys input-keys)
            [:diff-number :modified-at :author :signature]))))

(def validator/diff-edit-input
  "An input to edit an diff."
  (validator/and
   [validator/input
    validator/time-modified
    validator/diff-reference
    (validator/contains-only (edit-keys (keys diff-keys)))]))

(def strip-input
  "After an entity input has been processed/verified, we no longer need some of
  the fields."
  (fn [e]
    (delete-many [:machine-id :signature :nonce :diff-number] e)))

(def create-diff
  "Create an diff from a dict, checking that it is valid and storing it in `diffs`."
  (fn [i]
    (validator/diff-input i)
    (def n (diff-counter :next))
    (def i_
      (strip-input
       (<> i
           {:number   n})))
    (set-diffs (@ n) i_)
    (noncer [:use (lookup :nonce i)])
    n))

(def over-diffs
  "A helper to modify stuff in the diff ref."
  (fn [l f]
    (over-ref diffs l f)))

(def add-comment
  "Add a comment to a diff."
  (fn [c]
    (validator/comment-input c)
    (def c_ (strip-input c))
    (over-diffs
      (.. (@ (lookup :diff-number c)) (@ :comments))
      (fn [cs] (add-right c_ cs)))
    (noncer [:use (lookup :nonce c)])))

(def merge-new
  (fn [new]
    (fn [old]
      (<> old new))))

(def edit-diff
  "Modify some of the attributes of an diff."
  (fn [i]
    (validator/diff-edit-input i)
    (def i_ (delete :author (strip-input i)))
    (over-diffs (@ (lookup :diff-number i)) (merge-new i_))))

(def list-diffs
  "List existing diffs."
  (fn [] (read-ref diffs)))

(def commands
  "The set of allowed machine commands."
  {'create-diff    create-diff
   'list-diffs     list-diffs
   'edit-diff      edit-diff
   'add-comment  add-comment})

(def eval (make-updatable-eval commands))
