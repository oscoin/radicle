(ns monadic.project-remote)

;; Project RSM
;; Meant to be sent to a machine with send-code!

;; TODO(james): likely some of these are unneeded deps. Just copy-pasted those
;; of issue-remote.

(require prelude.basic '[if])
(require prelude.macros '[let])
(require prelude.dict '[keys delete-many])
(require prelude.ref '[over-ref modify-ref])
(require prelude.validation
         '[= and keys timestamp pred signed optional-keys
           string-of-max-length every member or
           contains-only integral has-type]
         validator)
(require prelude.set '[empty insert to-vec] set)
(require prelude.patterns '[match-pat])
(require prelude.util '[make-counter])
(require prelude.lens '[@ set-ref over-ref view-ref .. ... @nth])
(require prelude.nonces '[make-noncer])
(require prelude.auth '[make-simple-auth add-admin])
(require prelude.machine-remote '[lock-machine-commands])

(def rsms
  "A url-based dict of RSMs."
  (ref set/empty))

(def rsm-id
  "The name of this RSM."
  "monadic/radicle/project")

(def meta
  (ref {:name ""
        :description "" }))

(def noncer (make-noncer))

(def auth (make-simple-auth [:admin]))

(def validator.rsm
  (validator/keys
   {:type (validator/has-type :keyword)
    :id (validator/string-of-max-length 80)}))

(def validator.meta
  (validator/keys
   {:name (validator/string-of-max-length 80)
    :description (validator/string-of-max-length 800)}))

(def validator.input
  (validator/and
   [ (validator/keys {:nonce      (noncer :validator)
                      :machine-id   (validator/= rsm-id)})
    validator/signed
    (auth [:allowed :admin])] ))

(def add-rsm
  (fn [r]
    (validator.input r)
    (validator.rsm r)
    (noncer [:use (lookup :nonce r)])
    (modify-ref rsms (fn [rs] (set/insert r rs)))))

(def set-meta
  (fn [r]
    (validator.input r)
    (validator.meta r)
    (noncer [:use (lookup :nonce r)])
    (write-ref meta {:name (lookup :name r) :description (lookup :description r)})))

(def list-rsms
  (fn []
    (set/to-vec (read-ref rsms))))

(def get-meta
  (fn []
    (read-ref meta)))

;; General logic

(def commands
  "The set of allowed commands."
  (ref
   {'add-rsm   add-rsm
    'set-meta  set-meta
    'get-meta  get-meta
    'list-rsms list-rsms
    'add-admin (add-admin auth)}))

(ns toplevel)

(require prelude.machine-remote '[lock-machine-commands])
(require monadic.project-remote '[auth commands list-rsms get-meta])

(def tx
  (lock-machine-commands (auth [:allowed :admin])
                         commands))
