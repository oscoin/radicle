(load! (find-module-file! "prelude.rad"))

(import prelude/lens :unqualified)
(import prelude/chain '[send-code! ]:unqualified)
(import prelude/time '[install-fake-clock] :unqualified)
(import prelude/io :as 'io)
(import prelude/key-management '[use-fake-keys!] :unqualified)

(def radicle-diff-chain-id
  "The name of this chain."
  "monadic/radicle/diffs")

(def create-diffs-chain!
  "Create a remote diff chain with the given url."
  (fn [url]
    (chain/send-prelude! url)
    (send-code! url (find-module-file! "monadic/diff-remote.rad"))))

(def simple-diff
  "Create an open diff with no comments or labels."
  (fn [p]
  (def t (now!))
  (<> {:state       :pending
      :comments    []
      :created-at  t
      :modified-at t}
     p)))

(def simple-comment
  "Create a comment for an issue."
  (fn [diff-number bod author-name]
   (def t (now!))
   {:body         bod
    :author-name  author-name
    :diff-number  diff-number
    :created-at   t
    :modified-at  t}))

(def edit-diff!
 "Edit a remote diff with the keys in `my-keys.rad`."
 (fn [chain i]
   (chain/send-signed-command! chain radicle-diff-chain-id 'edit-diff i)))

(def simple-edit-diff!
 (fn [chain n i]
   (edit-diff! chain
                (<> {:diff-number n
                     :modified-at (now!)}
                    i))))

(def create-diff!
 "Create a new remote diff with the keys in `my-keys.rad`."
 (fn [chain i]
 (chain/send-signed-command! chain radicle-diff-chain-id 'create-diff i)))

(def add-comment!
  "Create a remote comment with the keys in `my-keys.rad`."
  (fn [chain c]
   (chain/send-signed-command! chain radicle-diff-chain-id 'add-comment c)))

(def simple-create-diff!
  "Create a remote diff with sensible defaults."
  (fn [chain diff]
    (create-diff! chain (simple-diff diff))))

(def simple-add-comment!
  "Create a remote comment."
  (fn [chain n b name]
    (add-comment! chain (simple-comment n b name))))

(def list-diffs
  "Return the full map of diffs."
  (fn [chain]
  (lookup :result (chain/eval-in-chain '(list-diffs) (read-ref chain)))))

(:test
 "The monadic diffs chain works."
 [:setup
  (do (chain/install-remote-chain-fake)
      (use-fake-keys!)
      (def chain-name "http://foo")
      (def chain (ref (chain/new-chain chain-name)))
      (create-diffs-chain! chain-name)
      (simple-create-diff! chain {:title "title0" :description "desc0" :patch "patch0"})
      (simple-create-diff! chain {:title "title1" :description "desc1" :patch "patch1"})
      (simple-add-comment! chain 0 "comment0" "name0")
      (simple-add-comment! chain 1 "comment1" "name1")
      (simple-edit-diff! chain 0 {:state :accepted})
      (chain/update-chain-ref! chain)
      (def diffs (list-diffs chain)))]
   [ (length (seq diffs)) ==> 2 ]
   [ (view (.. (@ 0) (@ :title)) diffs) ==> "title0" ]
   [ (view (.. (@ 1) (@ :title)) diffs) ==> "title1" ]
   [ (view (... [(@ 0) (@ :comments) (@nth 0) (@ :body)]) diffs) ==> "comment0" ]
   [ (view (... [(@ 1) (@ :comments) (@nth 0) (@ :body)]) diffs) ==> "comment1" ]
   [ (view (.. (@ 0) (@ :state)) diffs) ==> :accepted ]
 )
