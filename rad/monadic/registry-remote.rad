;; Registry machine
;; Meant to be sent to a machine with send-code!

(import prelude/basic :unqualified)
(import prelude/bool :unqualified)
(import prelude/dict :unqualified)
(import prelude/set :as 'set)
(import prelude/ref :unqualified)
(import prelude/validation :as 'validator)
(import prelude/patterns :unqualified)
(import prelude/util :unqualified)
(import prelude/lens :unqualified)
(import prelude/nonces :unqualified)
(import prelude/auth '[make-simple-auth add-admin] :unqualified)
(import prelude/machine-remote '[lock-machine-commands] :unqualified)

(def machine-id
  "The name of this machine."
  "monadic/radicle/registry")

(def registered-machines
  "Registered machines are stored in a dict in a ref, keyed by registered-machine-number."
  (ref {}))

(def registered-machine-counter
  "We use a stateful counter for giving registered machine numbers."
  (make-counter))

(def noncer (make-noncer))

(def auth (make-simple-auth [:admin]))

(def set-registered-machines
  "A helper to set stuff in the registered machines ref."
  (fn [l v]
    (set-ref registered-machines l v)))

(def over-registered-machines
  "A helper to modify stuff in the registered machines ref."
  (fn [l f]
    (over-ref registered-machines l f)))

(def input-keys
  {:nonce      (noncer :validator)
   :machine-id (validator/= machine-id)})

(def validator/time-created
  (validator/and
   [(validator/keys
     {;; NOTE that timestamps are claimed by authors, are not verified, and may
      ;; be incorrect.
      :created-at validator/timestamp
      :modified-at validator/timestamp})
    (validator/pred "`:modified-at` and `:create-at` are equal"
                    (fn [t]
                      (eq? (lookup :created-at t)
                           (lookup :modified-at t))))]))

(def validator/time-modified
  (validator/keys
   {:modified-at validator/timestamp}))

(def validator/input
  "Checks that the input as a valid new *machine input*, that is, it has an unused
  nonce, is marked with this machine name, and is signed."
  (validator/and
   [(validator/keys input-keys)
    validator/signed]))

(def validator/registered-machine-number
  "A validator for numbers which refer to existing registered machines."
  (validator/pred "Existing registered machine number" (fn [n] (member? n (read-ref registered-machines)))))

(def validator/registered-machine-reference
  "Refers to an existing registered machine."
  (validator/optional-keys {:registered-machine-number validator/registered-machine-number}))

(def registered-machine-keys
  {:name                   (validator/string-of-max-length 100)
   :description            (validator/string-of-max-length 4000)
   :labels                 (validator/every (validator/string-of-max-length 80))
   :registered-machine-id  (validator/string-of-max-length 80)})

(def validator/full-registered-machine (validator/keys registered-machine-keys))

(def validator/sub-registered-machine (validator/optional-keys registered-machine-keys))

(def validator/registered-machine-input
  "A registered machine should have all the required fields, be a signed input, etc."
  (validator/and
   [;; NOTE that we don't check `validator/input` at this point, because some of
    ;; the data is fixed before validation.
    validator/time-created
    validator/full-registered-machine]))

(def validator/admin-or-author
  "Checks if the author of th request is either an admin or the author of the
  registered machine."
  (validator/or
    [(validator/pred
      "edit author == original author"
      (fn [c]
        (match c
               {:registered-machine-number 'n
                :author 'a}
               (eq? (view-ref registered-machines (... [(@ n) (@ :author)]))
                    a))))
    (auth [:allowed :admin])]))

(def edit-keys
  "List of all allowed keys included in a edit request."
  (fn [ks]
    (<> ks
        (<> (keys input-keys)
            [:registered-machine-number :modified-at :author :signature]))))

(def validator/registered-machine-edit-input
  "An input to edit a registered machine."
  (validator/and
   [validator/input
    validator/time-modified
    validator/sub-registered-machine
    validator/registered-machine-reference
    validator/admin-or-author
    (validator/contains-only (edit-keys (keys registered-machine-keys)))]))

(def strip-input
  "After an entity input has been processed/verified, we no longer need some of
  the fields."
  (fn [e]
    (delete-many [:machine-id :signature :nonce :registered-machine-number] e)))

(def register-machine
  "Register a Radicle machine from a dict, checking that it is valid and storing
  it in `registered-machines`."
  (fn [i]
    (validator/input i)
    (validator/registered-machine-input i)
    (def n (registered-machine-counter :next))
    (def i_
      (strip-input
       (<> i
           {:number   n})))
    (set-registered-machines (@ n) i_)
    (noncer [:use (lookup :nonce i)])
    n))

(def delete-registered-machine
  "Deletes the registered machine from the registered machines ref."
  (fn [i]
    (validator/input i)
    (validator/admin-or-author i)
    (modify-ref registered-machines \(delete (lookup :registered-machine-number i) ?))))

(def merge-new
  (fn [new]
    (fn [old]
      (<> old new))))

(def edit-registered-machine
  "Modify some of the attributes of a registered machine."
  (fn [i]
    (validator/registered-machine-edit-input i)
    (def i_ (delete :author (strip-input i)))
    (over-registered-machines (@ (lookup :registered-machine-number i)) \(<> ? i_))))

;; These are intended for clients to run locally with eval-in-machine

(def list-registered-machines
  "List existing registered machines."
  (fn [] (read-ref registered-machines)))

;; General logic

(def commands
  "The set of allowed machine commands."
  (ref
    {'register-machine             register-machine
     'edit-registered-machine      edit-registered-machine
     'delete-registered-machine    delete-registered-machine
     'list-registered-machines     list-registered-machines
     'add-admin                    (add-admin auth)}))

(def tx
  (lock-machine-commands (auth [:allowed :admin])
                         commands))
