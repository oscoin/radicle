;; Helpers for setting up and interacting with issues chain (as defined in
;; rad/monadic/issues-remote.rad)

;; Create a remote issue chain. Returns a ref for the chain that you
;; can assign to a variable.

(load! "rad/prelude.rad")

(import prelude/lens :unqualified)

(def radicle-issues-chain-id
  "The name of this chain."
  "monadic/radicle/issues")

(def issues-chain
  (ref (chain/load-chain! "http://radicle.xyz/chains/radicle-issues")))

(def create-issues-chain!
  "Create a remote issue chain with the given url."
  (fn []
    (def url (lookup :url (read-ref issues-chain)))
    (chain/send-prelude! url)
    (send-code! url "rad/monadic/issue-remote.rad")))

(def sign-entity!
  "Assumes a key pair is stored at `my-keys.rad`. Using that key pair, will sign a
  dict by adding `:author` and `:signature` fields, so that it is valid
  according to `validator/signed`, while also adding a `:nonce`."
  (fn [e]
    (def nonce (uuid!))
    (def e_ (<> e {:chain-id radicle-issues-chain-id
                   :nonce    nonce}))
    (def ks (read (read-file! "my-keys.rad")))
    (def sig
      (gen-signature! (lookup :private-key ks)
                      (show e_)))
    (<> e_
        {:author    (lookup :public-key ks)
         :signature sig})))

(def simple-issue
  "Create an open issue with no comments or labels."
  (fn [tit bod]
    {:title      tit
     :body       bod
     :labels     []
     :state      :open
     :comments   []
     :created-at (now!)}))

(def simple-comment
  "Create a comment for an issue."
  (fn [issue-number bod]
    {:body bod
     :issue-number issue-number
     :created-at (now!)}))

(def create-issue!
  "Create a new remote issue with the keys in `my-keys.rad`."
  (fn [i]
    (send! (lookup :url (read-ref issues-chain))
           [(list 'create-issue (sign-entity! i))])))

(def add-comment!
  "Create a remote comment with the keys in `my-keys.rad`."
  (fn [c]
    (send! (lookup :url (read-ref issues-chain))
           [(list 'add-comment (sign-entity! c))])))

(def simple-create-issue!
  "Create a remote issue with sensible defaults."
  (fn [tit bod]
    (create-issue! (simple-issue tit bod))))

(def simple-add-comment!
  "Create a remote comment."
  (fn [in b]
    (add-comment! (simple-comment in b))))

(def list-issues
  "Return the full map of issues."
  (fn []
    (lookup :result (chain/eval-in-chain '(list-issues) (read-ref issues-chain)))))

(def fetch!
  "Update the locally cached state of the chain."
  (fn []
    (chain/update-chain-ref! issues-chain)))

(def import-github
  "Imports the github issues stored in file `githubissues.rad`. To create this
  file use the `radicle-github-issues` executable. Will add a note to all
  `:body`s that this is an imported entity."
  (fn []
    (def note-imported
      (fn [x]
        (insert
         :body
         (string-append
          (lookup :body x)
          "\n\n*Imported from GitHub.* Original author: `"
          (lookup :github-username x)
          "`.")
         x)))
    (def note-comments
      (fn [i] (over (@ :comments) (fn [cs] (map note-imported cs)) i)))
    (def issues (read (read-file! "githubissues.rad")))
    (def imported
      (map
       (fn [i] (note-imported (note-comments i)))
       issues))
    (map create-issue! imported)))

(def short
  "Short render of an issue."
  (fn [i]
    (string-append
     (show (lookup :number i))
     ": "
     (lookup :title i))))

(def list-last
  "Get the last `n` issues."
  (fn [n]
    (def is (sort-by (fn [i] (- 0 (lookup :number i))) (values (list-issues))))
    (take n is)))

(def get-by-id
  (fn [id]
    (lookup id (list-issues))))

(:test
 "The monadic issues chain works."
 [:setup
  (do (create-issues-chain!)
      (simple-create-issue! "title0" "body0")
      (simple-create-issue! "title1" "body1")
      (simple-add-comment! 0 "comment0")
      (simple-add-comment! 1 "comment1")
      (fetch!)
      (def is (list-issues)))]
 [ (length (seq is)) ==> 2 ]
 [ (view (.. (@ 0) (@ :title)) is) ==> "title0" ]
 [ (view (.. (@ 1) (@ :title)) is) ==> "title1" ]
 [ (view (... [(@ 1) (@ :comments) (@nth 0) (@ :body)]) is) ==> "comment1" ]
 [ (short (head (values is))) ==> "0: title0" ]
 [ (short (head (list-last 1))) ==> "1: title1" ]
)
