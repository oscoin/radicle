(file-module! "rad/prelude/test-eval.rad")
(import prelude/test-eval '[eval tests] :unqualified)

(file-module! "rad/prelude/basic.rad")
(file-module! "rad/prelude/patterns.rad")
(file-module! "rad/prelude/strings.rad")
(file-module! "rad/prelude/bool.rad")
(file-module! "rad/prelude/maybe.rad")
(file-module! "rad/prelude/exception.rad")
(file-module! "rad/prelude/list.rad")
(file-module! "rad/prelude/dict.rad")
(file-module! "rad/prelude/set.rad")
(file-module! "rad/prelude/io.rad")
(file-module! "rad/prelude/ref.rad")
(file-module! "rad/prelude/lens.rad")
(file-module! "rad/prelude/chain.rad")
(file-module! "rad/prelude/state-machine.rad")
(file-module! "rad/prelude/validation.rad")
(file-module! "rad/prelude/util.rad")
(file-module! "rad/prelude/test.rad")

(import prelude/basic :unqualified)
(import prelude/patterns :unqualified)
(import prelude/strings :as 'string)
(import prelude/bool :unqualified)
(import prelude/maybe :unqualified)
(import prelude/list :unqualified)
(import prelude/dict :unqualified)
(import prelude/io :unqualified)
(import prelude/ref :unqualified)
(import prelude/validation :as 'validator)
(import prelude/util :unqualified)
(import prelude/chain :as 'chain)
(import prelude/chain '[eval] :unqualified)

(def _initial-prompt-text
  "Text used for greeting in the repl."
  "Welcome to radicle. Type (help) for help.")

(def help
  "Default help text."
  (fn []
    "radicle is a LISP-like language intended for programming chains, and interacting with those chains.

    Type (doc '<name>) for further documentation of <name>."))
