;; (def prelude/ (file-module! "rad/prelude/test.rad"))
(def prelude/basic (file-module! "rad/prelude/basic.rad"))
(def prelude/patterns (file-module! "rad/prelude/patterns.rad"))
(def prelude/strings (file-module! "rad/prelude/strings.rad))
(def prelude/io (file-module! "rad/prelude/io.rad"))
(def prelude/bool (file-module! "rad/prelude/bool.rad"))
(def prelude/exception (file-module! "rad/prelude/exception.rad"))
(def prelude/recursion (file-module! "rad/prelude/recursion.rad"))
(def prelude/list (file-module! "rad/prelude/list.rad"))
(def prelude/dict (file-module! "rad/prelude/dict.rad"))
(def prelude/set (file-module! "rad/prelude/set.rad"))
(def prelude/ref (file-module! "rad/prelude/ref.rad"))
(def prelude/lens (file-module! "rad/prelude/lens.rad"))
(def prelude/chain (file-module! "rad/chain.rad"))
(def prelude/state-machine (file-module! "rad/state-machine.rad"))
(def prelude/validation (file-module! "rad/prelude/validation.rad"))
(def prelude/util (file-module! "rad/prelude/util.rad"))

(import prelude/basic)
(import prelude/patterns)
(import prelude/strings)
(import prelude/io)
(import prelude/bool)
(import prelude/exception)
(import prelude/recursion)
(import prelude/list)
(import prelude/dict)
(import prelude/set)
(import prelude/ref)
(import prelude/lens)
(import prelude/chain)
(import prelude/state-machine)
(import prelude/validation)
(import prelude/util)

(def pure-prelude-files
  "List of files which together define the pure prelude."
  (list
   "rad/prelude/test.rad" ;; pure unless test env
   "rad/prelude/basic.rad"
   "rad/prelude/patterns.rad"
   "rad/prelude/bool.rad"
   "rad/prelude/list.rad"
   "rad/prelude/dict.rad"
   "rad/prelude/set.rad"
   "rad/prelude/ref.rad"
   "rad/prelude/lens.rad"
   "rad/state-machine.rad"
   "rad/prelude/validation.rad"
   "rad/prelude/util.rad"
   ))

(def pure-prelude-code!
  "The pure prelude."
  (read-many
    (apply string-append
           (map (fn [f] (read-file! f)) pure-prelude-files))))

(def send-prelude!
  "Send the pure prelude to a chain."
  (fn [chain-id]
    (send! chain-id pure-prelude-code!)))

(def _initial-prompt-text
  "Text used for greeting in the repl."
  "Welcome to radicle. Type (help) for help.")

(def help
  "Default help text."
  (fn []
    "radicle is a LISP-like language intended for programming chains, and interacting with those chains.

    Type (doc '<name>) for further documentation of <name>."))
