(load! "rad/prelude/should-be.rad")
(load! "rad/prelude/io.rad")
(load! "rad/prelude/bool.rad")
(load! "rad/prelude/recursion.rad")
(load! "rad/prelude/list.rad")
(load! "rad/prelude/dict.rad")
(load! "rad/prelude/ref.rad")
(load! "rad/prelude/lens.rad")
(load! "rad/chain.rad")
(load! "rad/state-machine.rad")

(def pure-prelude-files
  (list
   "rad/prelude/pure-should-be.rad"
   "rad/prelude/recursion.rad"
   "rad/prelude/bool.rad"
   "rad/prelude/list.rad"
   "rad/prelude/dict.rad"
   "rad/prelude/ref.rad"
   "rad/prelude/lens.rad"
   "rad/state-machine.rad"
   ))

(document 'pure-prelude-files
          '()
          "List of files which together define the pure prelude.")

(def pure-prelude-code
  (read
   (string-append
    "(do "
    (apply string-append
           (map (fn [f] (read-file! f)) pure-prelude-files))
    ")")))

(document 'pure-prelude-code
          '()
          "The pure prelude.")

(def send-prelude!
  (fn [chain-id]
    (send! chain-id pure-prelude-code)))

(document 'send-prelude!
          '(("chain-id" string))
"Send the pure prelude to a chain.")

(def make-counter
  "Creates a stateful counter. Returns a dict with two keys: the function at `:next-will-be`
  will return the next number (without incrementing it), while the function at `:next`
  increments the number and returns it."
  (fn []
    (def i (ref -1))
    {:next-will-be (fn [] (+ 1 (read-ref i)))
     :next         (fn [] (modify-ref i (fn [x] (+ x 1))))}))
