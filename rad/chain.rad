;; Chains: Functions for dealing with chains.

;; A chain is conceptually:
;;   - A known starting state (i.e. environment, and the assumption that `eval
;;     == base-eval')
;;   - A sequence of inputs.

(def empty-chain
  {:state (pure-env)
   :inputs (list)
   :index 0})

(def test-chain
  {:state (pure-env)
   :inputs (list)
   :name "test"
   :index 0})

;; eval-in-chain

(def eval-in-chain
  (fn [expr chain]
    (def x (eval expr (lookup :state chain)))
    (dict :chain (dict :state (head (tail x))
                       :input (cons expr (lookup :input chain))
                       :index (+ 1 (lookup :index chain)))
          :result (head x))))

(document 'eval-in-chain
          '(("expr" any) ("chain" chain))
          "Evaluates 'expr' in the 'chain' and returns a dict with the ':result' and the resulting ':chain'.")

((fn []
  (def res (eval-in-chain '(+ 3 2) empty-chain))
  (def ~~> (fn [comp expected] (should-be "eval-in-chain" (view comp res) expected)))
  (~~> (@ :result) 5)
  (~~> (.. (@ :chain) (@ :input)) '((+ 3 2)))
  (~~> (.. (@ :chain) (@ :index)) 1)))

;; update-chain

(def update-chain
  (fn [chain]
    (def new-inputs
      (receive! (lookup :name chain) (lookup :index chain)))
    (def upd-ch
      (fn [ch expr]
        (def x (eval-in-chain expr ch))
        (view (@ :chain) x)))
    (foldl upd-ch chain new-inputs)))

(document 'update-chain
          '(("chain" chain))
          "Return a new chain updated with the new expressions from the remote chain")

;; add-quit

(def add-quit
  (fn [after-quit-state before-quit-eval]
    (fn [expr env]
      (if (eq? expr :quit)
          (list :ok after-quit-state)
          (before-quit-eval expr env)))))

(document 'add-quit
          '(("after-quit-state" dict) ("before-quit-eval" fn))
          "Adds a ':quit' command to 'before-quit-eval', which switches to 'after-quit-state' (and to the eval in that state)")

;; store-exprs

(def store-exprs
 (fn [evalfn]
     (fn [expr env]
         (def env_ (over (.. (@ :env) (@ '_inputs)) (fn [x] (add-right expr x)) env))
         (evalfn expr env_ ))))

(document 'store-exprs
          '(("eval" fn))
          "Store each new evaluated expression in '_inputs'")

;; add-send
(def add-send
  (fn [oeval]
      (fn [expr env]
          (if (eq? expr :send)
              (do (def inpl (.. (@ :env) (@ '_inputs)))
                  (def chainl (.. (@ :env) (@ '_cur-chain)))
                  (map (fn [e] (send! (view chainl env) e)) (view inpl env))
                  (def env_ (set inpl [] env))
                  (list :ok env_))
              ((store-exprs oeval) expr env)))))

(document 'add-send
          '(("eval-fn" fn))
          "Add a :send special form that sends the contents of _input to the chain _cur-chain")

;; enter-chain & enter-remote-chain

(def eval__ eval)
(def eval
  (fn [expr env]
      ;; The horror, the horror
      (if (list? expr)
          (if (> (length expr) 0)
              (cond
                (eq? (head expr) :enter-chain) (do
                                                 (def chain (head (eval__ (nth 1 expr) env)))
                                                 (def mod-state
                                                   (over (.. (@ :env) (@ 'eval))
                                                         (fn [x] (add-quit env x))
                                                         (lookup :state chain)))
                                                 (list :ok mod-state))
                (eq? (head expr) :enter-remote-chain) (do
                                                        (def chain (head (eval__ (nth 1 expr) env)))
                                                        (def state (lookup :state chain))
                                                        (def mod-state1
                                                          (over (@ :env) (fn [x] (insert '_inputs [] x)) state))
                                                        (def mod-state2
                                                          (over (@ :env)
                                                                (fn [x] (insert '_cur-chain (lookup :name chain) x))
                                                                mod-state1))
                                                        (def mod-state3
                                                          (over (.. (@ :env) (@ 'eval))
                                                                (fn [x] (add-send (add-quit (get-current-env) x)))
                                                                mod-state2))
                                                        (list :ok mod-state3))
                :else (eval__ expr env))
              (eval__ expr env))
          (eval__ expr env))))

(def eval-fn-app
  (fn [state f arg cb]
    (def exec (base-eval (list f (list 'quote arg)) state))
    (cb (head exec))
    exec))

(def updatable-eval
  (fn [sub-eval]
    (fn [expr state]
      (list-with-head
       expr
       (fn [cmd]
         (if (eq? cmd 'update)
           (base-eval (nth 1 expr) state)
           (sub-eval expr state)))
       (fn [] (sub-eval expr state))))))
