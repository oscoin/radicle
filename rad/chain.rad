;; Chains: Functions for dealing with chains.

;; A chain is conceptually:
;;   - A known starting state (i.e. environment, and the assumption that `eval
;;     == base-eval')
;;   - A sequence of inputs.

(def @var
  "A lens for variables in states of chains."
  (fn [ident]
    (... [(@ :env) (@ ident) (@ :val)])))

(def new-chain
  "Return an empty chain dictionary with the given url."
  (fn [url]
    {:state (pure-env)
     :inputs []
     :url url
     :index 0}))

;; eval-in-chain

(def eval-in-chain
  "Evaluates `expr` in the `chain` and returns a dict with the `:result` and the resulting `:chain`."
  (fn [expr chain]
    (def chain-eval (view (.. (@ :state) (@var 'eval)) chain))
    (def x (chain-eval expr (lookup :state chain)))
    (def result (nth 0 x))
    (def new-state (nth 1 x))
    (def new-chain
      (insert
        :state
        new-state
        (over (@ :inputs)
              (fn [inputs] (add-right expr inputs))
              (over (@ :index)
                    (fn [index] (+ 1 index))
                    chain))))
    {:chain new-chain
     :result result }))

(:test "eval-in-chain"
  [:setup
    (do (def empty-chain (new-chain ""))
        (def res1 (eval-in-chain '(def x 3) empty-chain))
        (def res (eval-in-chain '(+ x 2) (lookup :chain res1))))
  ]
  [ (view (@ :result) res)                 ==> 5                   ]
  [ (view (.. (@ :chain) (@ :inputs)) res) ==> [(def x 3) (+ x 2)] ]
  [ (view (.. (@ :chain) (@ :index)) res)  ==> 2                   ]
)

;; update-chain!

(def update-chain!
  "Takes a chain, and returns a new chain updated with the new expressions from the remote chain"
  (fn [chain]
    (def new-inputs
      (receive! (lookup :url chain) (lookup :index chain)))
    (def upd-ch
      (fn [ch expr]
        (def x (eval-in-chain expr ch))
        (view (@ :chain) x)))
    (foldl upd-ch chain new-inputs)))

(:test "update-chain!"
  [:setup
    (do
       (def chain-name (uuid!))
       (def chain (new-chain chain-name))
       (send! chain-name ['(+ 3 2)])
       (send! chain-name ['(+ 3 3)])
       (def chain (update-chain! chain)))
  ]
  [ (lookup :inputs chain) ==> [(+ 3 2) (+ 3 3)]]
)

(def load-chain!
  "Takes a `url`, and fetches the inputs of a remote chain and return a chain dictionary with the chain state."
  (fn [url]
    (update-chain! (new-chain url))))

;; update-chain-ref!

(def update-chain-ref!
  "Update `chain-ref` containing a chain with the new expressions from the remote chain"
  (fn [chain-ref]
    (modify-ref chain-ref update-chain!)
    :ok))

(:test "update-chain-ref!"
  [:setup
    (do
       (def chain-name (uuid!))
       (def chain (ref (new-chain chain-name)))
       (send! chain-name ['(+ 3 2)])
       (send! chain-name ['(+ 3 3)])
       (update-chain-ref! chain))
  ]
  [ (lookup :inputs (read-ref chain)) ==> [(+ 3 2) (+ 3 3)]]
)

;; add-quit

(def add-quit
  "Adds a `:quit` command to `before-quit-eval`, which switches to `after-quit-state` (and to the eval in that state)"
  (fn [after-quit-state before-quit-eval]
    (fn [expr env]
      (if (eq? expr :quit)
          (list :ok after-quit-state)
          (before-quit-eval expr env)))))

;; store-exprs

(def store-exprs
  "Store each new evaluated expression in `_inputs`"
 (fn [evalfn]
     (fn [expr env]
         (def env_ (over (@var '_inputs) (fn [x] (add-right expr x)) env))
         (evalfn expr env_ ))))

;; add-send!
(def add-send!
  "Add a `:send` special form that sends the contents of `_input` to the chain `_cur-chain`"
  (fn [oeval]
      (fn [expr env]
          (if (eq? expr :send)
              (do (def inpl (@var '_inputs))
                  (def chainl (@var '_cur-chain))
                  (send! (view chainl env) map (view inpl env))
                  (def env_ (set inpl [] env))
                  (list :ok env_))
              ((store-exprs oeval) expr env)))))

;; enter-remote-chain!
(def enter-remote-chain!
  "Make the eval behave as that of a remote chain. The second param is the env to return to after `:quit`."
  (fn [url env]
    (def chain (load-chain! url))
    (def chain-state (lookup :state chain))
    (def mod-state1
      (over (@ :env) (fn [x] (insert '_inputs {:val []} x)) chain-state))
    (def mod-state2
      (over (@ :env)
            (fn [x] (insert '_cur-chain {:val (lookup :url chain)} x))
            mod-state1))
    (def mod-state3
      (over (@var 'eval)
            (fn [x] (add-send! (add-quit env x)))
            mod-state2))
    (list :ok mod-state3)))

(def eval__ "The eval in place when `chain.rad` is loaded." eval)

(def eval
  "An eval in which one can use `(:enter-chain url)` to make the
  eval behave as that of a remote chain, and `:send` to send all
  enqueued expressions."
  (fn [expr env]
      (if (list? expr)
          (cond
            (eq? (head expr) :enter-chain)
              (enter-remote-chain! (head (eval__ (nth 1 expr) env)) env)
            :else (eval__ expr env))
          (eval__ expr env))))

(def eval-fn-app
  "Given a state, a function, an argument and a callback, returns
  the result of evaluating the function call on the arg in the given
  state, while also calling the callback on the result."
  (fn [state f arg cb]
    (def exec (base-eval (list f (list 'quote arg)) state))
    (cb (head exec))
    exec))

(def updatable-eval
  "Given an evaluation function `f`, returns a new one which augments `f` with a new
  command `(update expr)` which evaluates arbitrary expression using `base-eval`."
  (fn [sub-eval]
    (fn [expr state]
      (list-with-head
       expr
       (fn [cmd]
         (if (eq? cmd 'update)
           (base-eval (nth 1 expr) state)
           (sub-eval expr state)))
       (fn [] (sub-eval expr state))))))
