(load! "rad/prelude.rad")
(import prelude/machine '[eval] :unqualified)

(def help
  "Default help text."
  (fn []
    "radicle is a LISP-like language intended for programming machines, and interacting with those machines.

    Type (doc '<name>) for further documentation of <name>."))

(def read-line-or-exit! (fn []
  (def line (get-line!))
  (if (eq? line nil)
    (exit! 0)
    (read-many-annotated "[read-line-or-exit!]" line))))

(def repl
  {:name "repl"
   ;; Parse errors are thrown here
   :getter read-line-or-exit!})

(subscribe-to! repl (fn [xs] (map print! xs)))
