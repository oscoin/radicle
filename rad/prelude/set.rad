
{:module 'prelude/set
 :doc "Sets, built using dicts."
 :exports '[empty insert delete member? to-vec from-seq key-set subset?]}

(import prelude/bool :unqualified)
(import prelude/dict :as 'dict)

(def empty
  "An empty set."
  {})

(def insert
  "Insert a value into a set."
  (fn [x s]
    (insert x #t s)))

(def delete
  "Delete a value from a set."
  (fn [x s]
    (delete x s)))

(def member?
  "Query if a value is an element of a set."
  member?)

(def to-vec
  "Convert a set to a vector."
  (fn [s] (dict/keys s)))

(def from-seq
  "Create a set from a sequence."
  (fn [xs] (foldr insert {} xs)))

(:test "from-seq"
  [ (from-seq [1 3]) ==> {1 #t 3 #t} ]
  [ (eq? (from-seq [1 2]) (from-seq [1 1 2 1 2])) ==> #t ])

(def key-set
  "The set of keys of a dict."
  (fn [d]
    (map-values (fn [v] #t) d)))

(:test "key-set"
  [ (key-set {:a 1 :b 2}) ==> {:a #t :b #t} ])

(def subset?
  "Checks if `xs` is a subset of `ys`."
  (fn [xs ys]
    (all (map (fn [x] (member? x ys))
              (dict/keys xs)))))

(:test "subset?"
  [ (subset? (from-seq [1 3 5]) (from-seq [1 2 3 4 5])) ==> #t ]
  [ (subset? (from-seq [1 3]) (from-seq [1 2])) ==> #f ])
