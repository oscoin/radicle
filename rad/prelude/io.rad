{:module 'prelude/io
 :doc "Some basic I/O functions."
 :exports '[read-line! send-code! read-code!]}

;; read-line
(def read-line!
  "Read a single line of input and interpret it as radicle data."
  (fn [] (read (get-line!))))

(def read-code!
  "Read code (as data) from a file. Returns a vector of expressions"
  (fn [filename]
    (read-many (read-file! filename))))

(def send-code!
  "Send code from a file to a remote chain."
  (fn [chain-id filename]
    (send! chain-id (read-code! filename))))

(def print!
  "Print a value to the console or stdout."
  (fn [x]
    (put-str! (show x))))

(def shell!
  "Executes `command` using the shell with `to-write` as input. Stdout and stderr are inherited.
WARNING: using `shell!` with unsanitized user input is a security hazard!
Example: `(shell! \"ls -Glah\" \"\")`. "
  (fn [command to-write]
    (def cp
      { :cmdspec [:shell command]
        :stdin :create-pipe
        :stdout :inherit
        :stderr :inherit
      })
    (match (system! cp)
      {:stdin [:just 'stdin]
       :stdout :nothing
       :stderr :nothing
       :proc   'ph
      } (do (write-handle! stdin to-write)
            (wait-for-process! ph))
      _ (throw 'io-error "expected only stdin to be open"))))

(def process!
  "Executes `command` using 'execvp'. with 'to-write' as input. Stdout and stderr are inherit.
See 'man exec' for more information on 'execvp'.
Example: `(process! \"ls\" [\"-Glah\"] \"\")`. "
  (fn [command args to-write]
    (def cp
      { :cmdspec [:raw command args]
        :stdin :create-pipe
        :stdout :inherit
        :stderr :inherit
      })
    (match (system! cp)
      {:stdin [:just 'stdin]
       :stdout :nothing
       :stderr :nothing
       :proc   'ph
      } (do (write-handle! stdin to-write)
            (wait-for-process! ph))
      _ (throw 'io-error "expected only stdin to be open"))))
