{:module  'prelude/dict
 :doc     "Functions for manipualting dicts."
 :exports '[dict-from-seq keys values rekey modify-map delete-many]}

(def dict-from-seq
  "Creates a dictionary from a list of key-value pairs."
  (fn [xs]
    (foldr (fn [kv acc] (insert (head kv) (head (tail kv)) acc)) (dict) xs)))

(:test "dict-from-seq"
  [ (dict-from-seq (list (list :one 1) (list :two 2)))
    ==> { :one 1 :two 2 } ])

;; keys

(def keys
  "Given a `dict`, returns a vector of its keys."
  (fn [d]
    (map head (seq d))))

(:test "keys"
  [ (keys {:one 1 :two 2}) ==> [:one :two] ]
)

(def values
  "Given a `dict`, returns a vector of its values."
  (fn [d]
    (map (fn [x] (nth 1 x)) (seq d))))

(:test "values"
  [ (values {:a 0 :b 1}) ==> [0 1] ]
)

;; rekey
(def rekey
  "Change the key from 'old-key' to 'new-key' in 'dict'. If 'new-key' already exists, it is overwritten."
  (fn [old-key new-key mp]
    (def old-val (lookup old-key mp))
    (delete old-key (insert new-key old-val mp))))

(:test "rekey"
  [ (rekey :a :b {:a 5}) ==> {:b 5} ])

;; modify-map
(def modify-map
  "Given a key, a function and a dict, applies the function to the value associated to that key."
  (fn [key f mp]
    (insert key (f (lookup key mp)) mp)))

(:test "modify-map"
  [ (modify-map :a (fn [x] (+ x 1)) {:a 5})
     ==> {:a 6} ])

(def delete-many
  "Delete several keys from a dict."
  (fn [ks d]
    (foldr (fn [k d] (delete k d)) d ks)))
