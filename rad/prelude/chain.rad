{:module 'prelude/chain
 :doc "Functions for simulating remote chains."
 :exports '[new-chain load-chain! eval-in-chain update-chain-ref! eval
            updatable-eval update-chain! eval-fn-app send-prelude!
            send-code! send! receive! install-remote-chain-fake]}

(import prelude/io '[read-file-values!] :as 'io)
(import prelude/ref '[modify-ref] :unqualified)
(import prelude/lens '[make-lens .. ... view set over @ @def] :unqualified)
(import prelude/basic :unqualified)
(import prelude/io :unqualified)
(import prelude/patterns :unqualified)
(import prelude/strings :unqualified)
(import prelude/seq :unqualified)

(def base-send!
  "See documentation of `send!`"
  (fn [id inputs]
    (match id
      (/prefix "ipfs://" 'rest) (machine/ipfs/update! rest inputs)
      (/prefix "http://" _) (machine/eval-server/update! id inputs)
      _ (throw 'unknown-machine-type (string-append "Cannot handle machine ID " id)))
  ))

(def primitive-stub-ref/send! (ref base-send!))
(def send!
  "Update a machine with the vector of `inputs` to evaluate. Returns an
  index that identifies that last input. This index can be passed to
  `receive!`"
  (fn [machine-id inputs] ((read-ref primitive-stub-ref/send!) machine-id inputs)))

(def base-receive!
  "See documentation of `receive!`"
  (fn [id index]
    (match id
      (/prefix "ipfs://" 'rest) (machine/ipfs/get-log! rest index)
      (/prefix "http://" _) (machine/eval-server/get-log! id index)
      _ (throw 'unknown-machine-type (string-append "Cannot handle machine ID " id)))
  ))

(def primitive-stub-ref/receive! (ref base-receive!))
(def receive!
  "Get inputs from a machine. Returns a `[index inputs]` pair where
  `inputs` is a vector of expressions and `index` is the index of the
  last input in `inputs`. The `index` argument is either `:nothing` in
  which case all inputs are fetched or `[:just i]` in which case all
  inputs following after the index `i` are fetched."
  (fn [machine-id index] ((read-ref primitive-stub-ref/receive!) machine-id index)))


(def env-var
  "A lens for variables in envs."
  (fn [i]
    (make-lens (fn [e] (get-binding i e))
               (fn [v e] (set-binding i v e)))))

(def @env
  "A lens for env part of a machine state."
  (make-lens state->env set-env))

(def @var
  "A lens for variables in machine states."
  (fn [i]
    (.. @env (env-var i))))

(def new-chain
  "Return an empty chain dictionary with the given url."
  (fn [url]
    {:state (pure-state)
     :inputs []
     :url url
     :index :nothing}))

;; eval-in-chain

(def eval-in-chain
  "Evaluates `expr` in the `chain` and returns a dict with the `:result` and the resulting `:chain`."
  (fn [expr chain]
    (def chain-eval (view (.. (@ :state) (@var 'eval)) chain))
    (def x (chain-eval expr (lookup :state chain)))
    (def result (nth 0 x))
    (def new-state (nth 1 x))
    (def new-chain
      (insert
        :state
        new-state
        (over (@ :inputs)
              (fn [inputs] (add-right expr inputs))
               chain)))
    {:chain new-chain
     :result result }))

(:test "eval-in-chain"
  [:setup
    (do (def empty-chain (new-chain (uuid!)))
        (def res1 (eval-in-chain '(def x 3) empty-chain))
        (def res (eval-in-chain '(+ x 2) (lookup :chain res1))))
  ]
  [ (view (@ :result) res)                 ==> 5                   ]
  [ (view (.. (@ :chain) (@ :inputs)) res) ==> [(def x 3) (+ x 2)] ]
)

;; update-chain!

(def update-chain!
  "Takes a chain, and returns a new chain updated with the new expressions from the remote chain"
  (fn [chain]
    (def index (length (lookup :inputs chain)))
    (def receive-result
      (receive! (lookup :url chain) (lookup :index chain)))
    (def new-index (nth 0 receive-result))
    (def new-inputs (nth 1 receive-result))
    (def upd-ch
      (fn [ch expr]
        (def x (eval-in-chain expr ch))
        (view (@ :chain) x)))
    (def chain (foldl upd-ch chain new-inputs))
    (insert :index [:just new-index] chain)))

(def install-remote-chain-fake
  "Install test doubles for the `send!` and `receive!` primitives that
  use a mutable dictionary to store RSMs. Requires
  `rad/test/stub-primitives` to be loaded"
  (fn []
      (def remote-chains (ref {}))

      (write-ref primitive-stub-ref/send!
        (fn [name exprs]
          (modify-ref remote-chains
            (fn [chains] (over (@def name []) (fn [chain-exprs] (<> chain-exprs exprs)) chains)))))

      (write-ref primitive-stub-ref/receive!
        (fn [name maybeIndex]
          (def inputs (lookup name (read-ref remote-chains)))
          (def index
            (match maybeIndex
              (/just 'index) (+ index 1)
              :nothing 0))
          [(length inputs) (drop index inputs)]))
  ))
(:test "update-chain!"
  [:setup
    (do
       (install-remote-chain-fake)
       (def chain-name (uuid!))
       (def chain (new-chain chain-name))
       (send! chain-name ['(+ 3 2)])
       (send! chain-name ['(+ 3 3)])
       (def chain (update-chain! chain)))
  ]
  [ (lookup :inputs chain) ==> [(+ 3 2) (+ 3 3)]]
)

(def load-chain!
  "Takes a `url`, and fetches the inputs of a remote chain and return a chain dictionary with the chain state."
  (fn [url]
    (update-chain! (new-chain url))))

;; update-chain-ref!

(def update-chain-ref!
  "Update `chain-ref` containing a chain with the new expressions from the remote chain"
  (fn [chain-ref]
    (modify-ref chain-ref update-chain!)
    :ok))

(:test "update-chain-ref!"
  [:setup
    (do
       (install-remote-chain-fake)
       (def chain-name (uuid!))
       (def chain (ref (new-chain chain-name)))
       (send! chain-name ['(+ 3 2)])
       (send! chain-name ['(+ 3 3)])
       (update-chain-ref! chain))
  ]
  [ (lookup :inputs (read-ref chain)) ==> [(+ 3 2) (+ 3 3)]]
)

;; add-quit

(def add-quit
  "Adds a `:quit` command to `before-quit-eval`, which switches to `after-quit-state` (and to the eval in that state)"
  (fn [after-quit-state before-quit-eval]
    (fn [expr env]
      (if (eq? expr :quit)
          (list :ok after-quit-state)
          (before-quit-eval expr env)))))

;; store-exprs

(def store-exprs
  "Store each new evaluated expression in `_inputs`"
 (fn [evalfn]
     (fn [expr env]
         (def env_ (over (@var '_inputs) (fn [x] (add-right expr x)) env))
         (evalfn expr env_ ))))

;; enter-remote-chain!
(def enter-remote-chain!
  "Make the eval behave as that of a remote chain. The second param is the env to return to after `:quit`."
  (fn [url env]
    (def chain (load-chain! url))
    (def chain-state (lookup :state chain))
    (def mod-state1 (set (@var '_inputs) [] chain-state))
    (def mod-state2 (set (@var '_cur-chain) (lookup :url chain) mod-state1))
    (def mod-state3 (over (@var 'eval)
                          (fn [x] (add-quit env x))
                          mod-state2))
    (list :ok mod-state3)))

(def eval__ "The eval in place when `chain.rad` is loaded." eval)

(def eval
  "An eval in which one can use `(:enter-chain url)` to make the
  eval behave as that of a remote chain, and `:send` to send all
  enqueued expressions."
  (fn [expr env]
      (if (list? expr)
          (cond
            (eq? (first expr) :enter-chain)
              (enter-remote-chain! (first (eval__ (nth 1 expr) env)) env)
            :else (eval__ expr env))
          (eval__ expr env))))

(def eval-fn-app
  "Given a state, a function, an argument and a callback, returns
  the result of evaluating the function call on the arg in the given
  state, while also calling the callback on the result."
  (fn [state f arg cb]
    (def exec (base-eval (list f (list 'quote arg)) state))
    (cb (first exec))
    exec))

(def updatable-eval
  "Given an evaluation function `f`, returns a new one which augments `f` with a new
  command `(update expr)` which evaluates arbitrary expression using `base-eval`."
  (fn [sub-eval]
    (fn [expr state]
      (match expr
             (/cons 'cmd _) (if (eq? cmd 'update)
                              (base-eval (nth 1 expr) state)
                              (sub-eval expr state))
             _ (sub-eval expr state)))))

(def pure-prelude-files
  "List of files which together define the pure prelude."
  (map find-module-file!
    ["prelude/basic.rad"
     "prelude/patterns.rad"
     "prelude/strings.rad"
     "prelude/dict.rad"
     "prelude/bool.rad"
     "prelude/maybe.rad"
     "prelude/list.rad"
     "prelude/set.rad"
     "prelude/ref.rad"
     "prelude/lens.rad"
     "prelude/state-machine.rad"
     "prelude/validation.rad"
     "prelude/util.rad"]))

(def file-to-module
  "Make the text of a file into code for a module."
  (fn [file]
    (cons 'module (vec-to-list (io/read-file-values! file)))))

(def pure-prelude-code
  "Code for the pure prelude. Useful as the first inputs to a new chain."
  (<> [(file-to-module (find-module-file! "prelude/test-eval.rad"))
       '(import prelude/test-eval '[eval tests] :unqualified)]
      (map file-to-module pure-prelude-files)))

(def send-prelude!
  "Send the pure prelude to a chain."
  (fn [chain-id]
    (send! chain-id pure-prelude-code)))

(def send-code!
  "Send code from a file to a remote chain."
  (fn [chain-id filename]
    (send! chain-id (io/read-file-values! filename))))
