{:module 'prelude/machine-remote
 :doc "Functions for writing remote RSMs"
 :exports '[lock-machine lock-machine-commands]}

(import prelude/ref '[modify-ref] :unqualified)
(import prelude/patterns :unqualified)

(def lock-machine
  "Lock the arbitrary transactions of a machine using a validator."
  (fn [validator f]
    (fn [expr _state]
      (match expr
             (/cons (/= 'update) (/cons 'e /nil))
             (do (validator e)
                 (lookup :eval e))
             _
             (f expr)))))

(def lock-machine-commands
  "Lock the machine with a ref of a dict of commands."
  (fn [validator commands-ref]
    (lock-machine validator
                  (fn [expr]
                    (def command (first expr))
                    (def args    (rest expr))
                    (def do-this (lookup command (read-ref commands-ref)))
                    (apply do-this args)))))

(test
 "lock-machine"
 [:setup
  (do
    (machine/install-remote-machine-fake)
    (def id (machine/new-machine!))
    (machine/send-prelude! id)
    (machine/send!
     id
     '[(import prelude/patterns :unqualified)
       (import prelude/ref :unqualified)
       (import prelude/machine-remote '[lock-machine] :unqualified)
       (def counter (ref 0))
       (def inc (ref (fn [] (modify-ref counter (fn [x] (+ x 1))))))
       (def get (fn [] (read-ref counter)))
       (def tx
         (lock-machine
          (fn [x]
            (if (eq? (lookup :pwd x) "secret")
              :ok
              (throw 'validation-failure "nope")))
          (fn [e]
            (match e
                   :inc ((read-ref inc))
                   :get (get)
                   _    (throw 'bad-input "Just :inc or :get!")))))])
    (machine/send! id [:inc :inc])
    (def i (machine/query! id :get))
    (machine/send!
     id
     ['(update
        {:eval (write-ref inc (fn [] (modify-ref counter (fn [x] (+ x 2)))))
         :pwd "secret"})])
    (machine/send! id [:inc :inc])
    (def j (machine/query! id :get))
    (def ok (catch 'validation-failure
                (machine/send!
                 id
                 ['(update
                    {:eval (write-ref inc (fn [] (modify-ref counter (fn [x] (+ x 2)))))
                     :pwd "badsecret"})])
              (fn [ignore_] :ok)))
    )
  ]
 [ i ==> 2 ]
 [ j ==> 6 ]
 [ ok ==> :ok ]
 )
