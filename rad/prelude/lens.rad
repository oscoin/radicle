;; Lenses ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; make-lens

(def make-lens
  (fn [g s]
    {:getter g :setter s}))

(document 'make-lens
  '(("getter" function) ("setter" function))
  "Makes a lens out of a getter and a setter.")

;; view

(def view
  (fn [lens target]
    ((lookup :getter lens) target)))

(document 'view
  '(("lens" dict) ("target" any))
  "View a value through a lens.")

;; set

(def set
  (fn [lens new-view target]
    ((lookup :setter lens) new-view target)))

(document 'set
  '(("lens" dict) ("value" any) ("target" any))
  "Set a value though a lens.")

;; id-lens

(def id-lens
  (make-lens
   (fn [target] target)
   (fn [new-view target] new-view)))

(document 'id-lens
  '()
  "The identity lens.")

;; ..

(def ..
  (fn [lens1 lens2]
    (make-lens
     (fn [target] (view lens2 (view lens1 target)))
     (fn [new-view target] (set lens1 (set lens2 new-view (view lens1 target)) target)))))

(document '..
  '(("lens1" dict) ("lens2" dict))
  "Compose two lenses.")

;; ...

(def ... (fn [lenses] (foldr .. id-lens lenses)))

(document '...
  '(("lenses" list))
  "Compose multiple lenses.")

;; over
(def over
  (fn [lens f target]
    (set lens (f (view lens target)) target)))

(document 'over
  '(("lens" dict) ("fn" function) ("target" any))
  "Modify a value through a lens.")

;; @

(def @
  (fn [k]
    (make-lens (fn [mp] (lookup k mp))
               (fn [v mp] (insert k v mp)))))

(document '@
  '(("key" any))
  " Returns a lens targetting keys of dicts.")

(def _Just
  (make-lens (fn [v] v)
             (fn [x s] [:Just x])))

(should-be "view lens"
           (view (@ :one) {:one 1 :two 2})
           1)

(should-be "set lens"
           (set (@ :two) 42 {:one 1 :two 2})
           {:one 1 :two 42})

(should-be "over lens"
           (over (@ :one)
                 (fn [x] (+ x 1))
                 {:one 1 :two 2})
           {:one 2 :two 2})

;; (should-be "lens composition"
;;            (over (.. (@ :a) (@ :b))
;;                  (map-maybe (fn [x] (+ x 1)))
;;                  {:a {:b 2}})
;;            {:a {:b 3}})

;; (do (def make-deep
;;       (fn [x] {:a {:b {:c x}}}))
;;     (should-be "deep lenses"
;;                (over (... (list (@ :a) (@ :b) (@ :c)))
;;                      (map-maybe (fn [x] (+ x 1)))
;;                      (make-deep 0))
;;                (make-deep 1)))

;; ;; Lens access to refs

;; ;; view-ref
;; (def view-ref
;;   (fn [r lens]
;;     (view lens (read-ref r))))

;; (document 'view-ref
;;   '(("ref" ref) ("lens" dict))
;;   "Like 'view', but for refs.")

;; (should-be "view-ref"
;;            (view-ref (ref {:key 1}) (@ :key))
;;            [:Just 1])

;; ;; set-ref

;; (def set-ref
;;   (fn [r lens v]
;;     (modify-ref r (fn [x] (set lens v x)))))

;; (document 'set-ref
;;   '(("ref" ref) ("lens" dict) ("new-value" any))
;;   "Like 'set', but for refs.")

;; (should-be "set-ref"
;;            ((fn [r]
;;               (set-ref r (@ :a) [:Just 2])
;;               (view-ref r (@ :a)))
;;             (ref {:a 1}))
;;            [:Just 2])
;; ;; set-ref

;; (def over-ref
;;   (fn [r lens f]
;;     (modify-ref r (fn [x] (over lens f x)))))

;; (document 'over-ref
;;   '(("ref" ref) ("lens" dict) ("fn" function))
;;   "Like 'over', but for refs.")

;; (should-be "over-ref"
;;            ((fn [r]
;;               (over-ref r (@ :a) (map-maybe (fn [x] (* x 2))))
;;               (view-ref r (@ :a)))
;;             (ref {:a 2}))
;;            [:Just 4])
