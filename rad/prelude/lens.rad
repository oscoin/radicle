{:module 'prelude/lens
 :doc "Functional references."
 :exports ['make-lens 'view 'set 'id-lens '.. '... 'over '@ '@nth 'view-ref 'set-ref 'over-ref]}

(import prelude/ref)

;; Lenses ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; make-lens

(def make-lens
  "Makes a lens out of a getter and a setter."
  (fn [g s]
    {:getter g :setter s}))

;; view

(def view
  "View a value through a lens."
  (fn [lens target]
    ((lookup :getter lens) target)))

;; set

(def set
  "Set a value though a lens."
  (fn [lens new-view target]
    ((lookup :setter lens) new-view target)))

;; id-lens

(def id-lens
  "The identity lens."
  (make-lens
   (fn [target] target)
   (fn [new-view target] new-view)))

;; ..

(def ..
  "Compose two lenses."
  (fn [lens1 lens2]
    (make-lens
     (fn [target] (view lens2 (view lens1 target)))
     (fn [new-view target] (set lens1 (set lens2 new-view (view lens1 target)) target)))))

;; ...

(def ...
  "Compose multiple lenses."
  (fn [lenses] (foldr .. id-lens lenses)))

;; over
(def over
  "Modify a value through a lens."
  (fn [lens f target]
    (set lens (f (view lens target)) target)))

;; @

(def @
  "Returns a lens targetting keys of dicts."
  (fn [k]
    (make-lens (fn [mp] (lookup k mp))
               (fn [v mp] (insert k v mp)))))

(:test "view lens"
  [ (view (@ :one) {:one 1 :two 2}) ==> 1 ])

(:test "set lens"
  [ (set (@ :two) 42 {:one 1 :two 2}) ==> {:one 1 :two 42} ])

(:test "over lens"
  [ (over (@ :one)
          (fn [x] (+ x 1))
          {:one 1 :two 2})
    ==> {:one 2 :two 2} ])

(:test "lens composition"
  [ (over (.. (@ :a) (@ :b))
          (fn [x] (+ x 1))
          {:a {:b 2}})
     ==> {:a {:b 3}} ])

(:test "deep lenses"
  [ (over (... (list (@ :a) (@ :b) (@ :c)))
          (fn [x] (+ x 1))
          {:a {:b {:c 0}}})
     ==> {:a {:b {:c 1}}} ])

;; @nth

(def @nth
  "Lenses into the nth element of a vector"
  (fn [n]
    (make-lens
      (fn [s] (nth n s))
      (fn [val s]
         (<> (take n s) (add-left val (drop (+ n 1) s)))))))

(:test "@nth"
  [ (view (@nth 1) [0 1]) ==> 1 ]
  [ (over (@nth 1) (fn [x] (+ x 1)) [0 1]) ==> [0 2] ])

;; Lens access to refs

;; view-ref
(def view-ref
  "Like 'view', but for refs."
  (fn [r lens]
    (view lens (read-ref r))))

(:test "view-ref"
  [ (view-ref (ref {:key 1}) (@ :key)) ==> 1 ])

;; set-ref

(def set-ref
  "Like 'set', but for refs."
  (fn [r lens v]
    (modify-ref r (fn [x] (set lens v x)))))

(:test "set-ref"
  [ ((fn [r]
       (set-ref r (@ :a) 2)
       (view-ref r (@ :a)))
     (ref {:a 1}))
    ==> 2 ])

;; over-ref

(def over-ref
  "Like 'over', but for refs."
  (fn [r lens f]
    (modify-ref r (fn [x] (over lens f x)))))

(:test "over-ref"
  [ ((fn [r]
      (over-ref r (@ :a) (fn [x] (* x 2)))
      (view-ref r (@ :a)))
    (ref {:a 2}))
    ==> 4 ])
