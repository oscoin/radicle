(def view
  (fn [o x]
    ((lookup :getter (nth 1 o)) x)))

(def set
  (fn [o x a]
    (def c (nth 0 o))
    (def t (nth 1 o))
    (cond
      (eq? c :Lens)  ((lookup :setter t) x a)
      (eq? c :Prism) ((lookup :re t) x)
      (eq? x :T1)    ((lookup :setter t) x a))))

(def re
  (fn [p x]
    ((lookup :re (nth 1 p)) x)))

(def over
  (fn [o f target]
    (set o ((map-maybe f) (view o target)) target)))

(def lens-to-t1
  (fn [l]
    [:T1
     {:getter (fn [t] [:Just (nth 1 (view l t))])
      :setter (lookup :setter (nth 1 l))}]))

(def prism-to-t1
  (fn [p]
    [:T1
     {:getter (lookup :getter (nth 1 p))
      :setter (fn [x t] (re p x))}]))

(def to-t1
  (fn [o]
    (def c (nth 0 o))
    (cond
      (eq? c :Lens)  (lens-to-t1 o)
      (eq? c :Prism) (prism-to-t1 o)
      :else          o)))

(def compose-t1
  (fn [o1 o2]
    [:T1
     {:getter (fn [t]
                (maybe (view o1 t)
                       :Nothing
                       (fn [v1] (view o2 v1))))
      :setter (fn [x t]
                (maybe (view o1 t)
                       t
                       (fn [v1]
                         (set o1 (set o2 x v1) t))))}]))

(def ..
  (fn [o1 o2]
    (def t [(nth 0 o1) (nth 0 o2)])
    (cond
      (eq? t [:Lens :Lens])
      [:Lens {:getter (fn [t]
                        (view o2 (view o1 t)))
              :setter (fn [x t]
                        (set o1 (set o2 x (view o1 t)) t))}]
      (eq? t [:Prism :Prism])
      [:Prism {:getter (fn [t]
                         (maybe (view o1 t)
                                :Nothing
                                (fn [v1] (view o2 v1))))
               :re (fn [x] (re o1 (re o2 x)))}]
      :else (compose-t1 (to-t1 o1) (to-t1 o2)))))

(def id-lens
  [:Lens
   {:getter (fn [t] [:Just t])
    :setter (fn [x t] x)}])

(def ... (fn [os] (foldr .. id-lens os)))

(def _Just
  [:Prism
   {:getter (fn [t] t)
    :re     (fn [x] [:Just x])}])

(def @
  (fn [k]
    [:Lens
     {:getter (fn [mp] [:Just (safe-lookup k mp)])
      :setter (fn [mmv mp]
                (maybe mmv
                       :error
                       (fn [mv]
                         (maybe mv
                                (delete k mp)
                                (fn [v] (insert k v mp))))))}]))
