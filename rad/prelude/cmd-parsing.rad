{:module 'prelude/cmd-parsing
 :doc "Functions for parsing commands."
 :exports
 '[parse-failure /cmd-0 /cmd-1 /cmd-2 /cmd-1-opts]}

(import prelude/validation :as 'validation)
(import prelude/patterns :unqualified)

(def parse-failure
  "Prints the passed error message and help text and exits."
  (fn [error help]
    (put-str! error)
    (put-str! help)
    (exit! 1)))

(def missing-arg-error
  (fn [arg cmd]
    (string-append "Missing argument \"" (show arg) "\" for command \"" cmd "\"")))

(def too-many-args-error
  (fn [cmd]
    (string-append "Too many arguments for command \"" cmd "\"")))

(def /cmd-1-opts
  "Matches a command `cmd` with one argument and an optional
  combination of options that are allowed by opts-map"
  (fn [cmd opts opts-map]
    (fn [v]
      (match v
        [cmd]           [:just {opts []}]
        (/cons cmd 'os) [:just {opts (opts-map os)}]
        _               :nothing))))

(:test "/cmd-1-opts"
  [:setup
    (do
      (def opts-map
        (fn [opts]
          (map
            (fn [opt]
              (if (elem? opt ["--new" "--old"])
                (drop 2 opt)
                "unknown filter")) opts))))]
  [ ((/cmd-1-opts "list" 'opts opts-map) ["list"]) ==> [:just {opts []}]]
  [ ((/cmd-1-opts "list" 'opts opts-map) ["no-list"]) ==> :nothing]
  [ ((/cmd-1-opts "list" 'opts opts-map) ["list" "--old"]) ==> [:just {opts ["old"]}]]
  [ ((/cmd-1-opts "list" 'opts opts-map) ["list" "--old" "--new"]) ==> [:just {opts ["old" "new"]}]]
  [ ((/cmd-1-opts "list" 'opts opts-map) ["list" "--filter"]) ==> [:just {opts ["unknown filter"]}]]
  [ ((/cmd-1-opts "list" 'opts opts-map) ["list" "--old" "--current"]) ==> [:just {opts ["old" "unknown filter"]}]])

(def /cmd-2
  "Matches a command `cmd` with exactly two arguments."
  (fn [cmd arg-1 arg-2 help]
    ((validation/type :string) cmd)
    ((validation/type :atom) arg-1)
    ((validation/type :atom) arg-2)
    (fn [value]
      (match value
        [cmd 'a-1 'a-2] (match-pat [arg-1 arg-2] [a-1 a-2])
        [cmd _] (parse-failure (missing-arg-error arg-2 cmd) help)
        [cmd] (parse-failure (missing-arg-error arg-1 cmd) help)
        (/cons cmd _) (parse-failure (too-many-args-error cmd) help)
        _ :nothing))))

(def /cmd-1
  "Matches a command `cmd` with exactly one arguments."
  (fn [cmd cmd-args-pat help]
    ((validation/type :string) cmd)
    ((validation/type :atom) cmd-args-pat)
    (fn [value]
      (match value
        [cmd 'cmd-args] (match-pat cmd-args-pat cmd-args)
        [cmd] (parse-failure (missing-arg-error cmd-args-pat cmd) help)
        (/cons cmd _) (parse-failure (too-many-args-error cmd) help)
        _ :nothing))))

(def /cmd-0
  "Matches a command `cmd` with no other arguments."
  (fn [cmd help]
    ((validation/type :string) cmd)
    (fn [value]
     (match value
       [cmd] [:just {}]
       (/cons cmd _) (parse-failure (too-many-args-error cmd) help)
       _ :nothing))))
