(def validator/=
  "Given `x`, returns a validator that checks for equality with `x`."
  (fn [x]
    (fn [y]
      (if (eq? x y)
        x
        (throw 'validation-failure (string-append "Not equal to: " (show x)))))))

(def validator/member
  "Given a structure, returns a validator which checks for membership in the structure."
  (fn [xs]
    (fn [x]
      (if (member? x xs)
        x
        (throw 'validation-failure (string-append "Not a member of: " (show xs)))))))

(def validator/and
  "Given a sequence of validators `vs`, returns a new validator which, given a
  value, checks if it conforms to all the validators in `vs`."
  (fn [vs]
    (fn [x]
      (map (fn [v] (v x)) vs)
      x)))

(def-rec validator/or
  "Given a vector of validators `vs`, returns a new validator which, given a
  value, checks if it conforms to at least one of the `vs`."
  (fn [vs]
    (fn [x]
      (if (eq? vs [])
        (throw 'validation-failure "validation/or: didn't satisfy any of the validators")
        (catch
          'validation-failure
          ((nth 0 vs) x)
          (fn [y] ((validator/or (drop 1 vs)) x)))))))

(def validator/type
  "Checks that a value has a type. Expects a keyword describing the type, as
  returned by the `type` function."
  (fn [t]
    (fn [x]
      (if (eq? (type x) t)
        x
        (throw 'validation-failure (string-append "Did not have type " (show t) ": " (show x)))))))

(def validator/pred
  "Given a description and a predicate, returns a validator that checks if the
  predicate is true."
  (fn [name p]
    (fn [x]
      (if (p x)
        x
        (throw 'validation-failure (string-append "Did not satisfy predicate: " name))))))

(def validator/key
  "Given a key and a validator, returns a validator which checks for
  the existence of that key and that the associated value conforms to the validator."
  (fn [k v]
    (fn [d]
      (if (member? k d)
        (v (lookup k d))
        (throw 'validation-failure (string-append "Missing required key: " (show k)))))))

(def validator/keys
  "Given a dict associating keys to validators, returns a validator which checks a dict
  for the existence of those keys, and that they conform to the associated validators."
  (fn [ks]
    (fn [d]
      (if (dict? d)
        ((validator/and
          (map (fn [kv] (validator/key (nth 0 kv) (nth 1 kv)))
               (seq ks)))
         d)
        (throw 'validation-failure (string-append "Not a dict: " (show d)))))))

(def validator/every
  "Given a validator, creates a new validator which checks that all the items in
  a sequence conform to it."
  (fn [v]
    (fn [xs]
      (map v xs))))

(def validator/uuid
  "Validates UUIDs."
  (validator/and
   [(validator/type :string)
    (validator/pred "valid UUID" uuid?)]))

(def validator/signed
  "Checks that a value is a dict with `:signature` and `:author` keys, and that
  the signature is valid for the rest of the dict for that author. The rest of
  the dict is turned into a string according to `show`."
  (validator/and
   [(validator/keys
     {:author (validator/pred "valid public key" public-key?)})
    (validator/pred
     "Valid signature"
     (fn [d]
       (verify-signature
        (lookup :author d)
        (lookup :signature d)
        (show (delete-many [:author :signature] d)))))]))

(:test "validator/signed"
  [:setup
   (do (def keys (gen-key-pair! (default-ecc-curve)))
       (def sk (lookup :private-key keys))
       (def pk (lookup :public-key keys))
       (def payload
         {:nonce (uuid!)
          :some "data"})
       (def payload_ (insert :some "datadata" payload))
       (def sig  (gen-signature! sk (show payload)))
       (def seal {:author    (lookup :public-key keys)
                  :signature sig})
       (def full (<> payload seal))
       (def full_ (<> payload_ seal))
       (def ok
         (catch 'any (do (validator/signed full) :ok) (fn [x] :not-ok)))
       )
   ]
  [ ok ==> :ok ]
)
