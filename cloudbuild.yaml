timeout: 3600s # Cache misses are slow to rebuild
substitutions:
  # Bump the version if you make changes to `ci/Dockerfile
  _BUILD_IMAGE: eu.gcr.io/opensourcecoin/radicle-ci:v4
options:
  machineType: N1_HIGHCPU_8
steps:
  - id: "Build CI base image"
    name: gcr.io/cloud-builders/docker
    entrypoint: 'bash'
    args:
    - '-c'
    - |
      set -euxo pipefail

      if ! docker pull $_BUILD_IMAGE; then
        docker build ci --tag $_BUILD_IMAGE
        docker push $_BUILD_IMAGE
      fi

  - id: "Load cache"
    name: $_BUILD_IMAGE
    entrypoint: 'bash'
    args:
    - '-c'
    - |
      set -euxo pipefail

      source scripts/ci.sh
      load-cache

  - id: "Build deps"
    name: $_BUILD_IMAGE
    env: ['STACK_ROOT=/workspace/.stack']
    entrypoint: 'bash'
    args:
    - '-c'
    - |
      set -euxo pipefail

      stack config set system-ghc --global true
      stack config set install-ghc --global false

      stack build \
        --no-terminal \
        stylish-haskell hlint weeder

      stack build \
        --no-terminal \
        --test \
        --dependencies-only

  - id: "Save cache"
    waitFor: ["Build deps"]
    name: $_BUILD_IMAGE
    entrypoint: 'bash'
    env:
    - BRANCH_NAME=$BRANCH_NAME
    args:
    - '-c'
    - |
      set -euxo pipefail

      source scripts/ci.sh
      save-cache

  - id: "Format"
    name: $_BUILD_IMAGE
    env: ['STACK_ROOT=/workspace/.stack']
    args: ['./scripts/check-fmt.sh']

  - id: "Lint"
    name: $_BUILD_IMAGE
    env: ['STACK_ROOT=/workspace/.stack']
    args: ['stack', 'exec', '--', 'hlint', '.']

  - id: "Build"
    name: $_BUILD_IMAGE
    env: ['STACK_ROOT=/workspace/.stack']
    entrypoint: bash
    args:
    - '-c'
    - |
      set -euxo pipefail

      stack build \
        --no-terminal \
        --fast \
        --pedantic \
        --test \
        --no-run-tests

  - id: "Test"
    name: $_BUILD_IMAGE
    env: ['STACK_ROOT=/workspace/.stack']
    entrypoint: bash
    args:
    - '-c'
    - |
      set -euxo pipefail

      stack test :doctest
      stack test :spec
      RADPATH="$(pwd)/rad" stack exec -- radicle test/all.rad

  - id: "Lint (weeder)"
    waitFor: ["Build"]
    name: $_BUILD_IMAGE
    env: ["STACK_ROOT=/workspace/.stack"]
    args: ["stack", "exec", "--", "weeder", "--match"]

  - id: "Build rad-daemon-radicle image"
    waitFor:
    - "Test"
    name: $_BUILD_IMAGE
    entrypoint: bash
    env:
    - STACK_ROOT=/workspace/.stack
    - COMMIT_SHA=$COMMIT_SHA
    - BRANCH_NAME=$BRANCH_NAME
    args:
    - "-c"
    - |
      set -euxo pipefail

      ./images/rad-daemon-radicle/ci-copy-bin.sh

      image_name="eu.gcr.io/opensourcecoin/rad-daemon-radicle"
      short_sha=$(echo "$COMMIT_SHA" | head --bytes=7)
      # Looks like this: b2018.12.06-a76a52f
      tag="b$(date +%Y.%m.%d)-${short_sha}"
      docker build \
        --tag "$image_name" \
        --cache-from "$image_name" \
        ./images/rad-daemon-radicle
      if [ "$BRANCH_NAME" == "master" ]; then
        docker tag "$image_name" "$image_name:$tag"
        docker push "$image_name"
        docker push "$image_name:$tag"
      fi

  - id: "Build reference document and swagger spec"
    waitFor:
    - "Build"
    name: $_BUILD_IMAGE
    env: ['STACK_ROOT=/workspace/.stack']
    entrypoint: bash
    args:
    - '-c'
    - |
      set -euxo pipefail

      mv docs/source/reference.rst oldref
      mv docs/source/daemon-api.yaml oldswagger
      RADPATH="$(pwd)/rad" stack exec radicle-ref-doc
      if ! (diff oldref docs/source/reference.rst); then
        echo "Reference docs are not checked in"
        exit 1
      fi
      if ! (diff oldswagger docs/source/daemon-api.yaml); then
        echo "Daemon swagger spec is not checked in"
        exit 1
      fi

  - id: "Check tutorial"
    waitFor:
    - "Build"
    name: $_BUILD_IMAGE
    env: ['STACK_ROOT=/workspace/.stack']
    entrypoint: bash
    args:
    - '-c'
    - |
      set -euxo pipefail

      RADPATH="$(pwd)/rad" stack exec radicle-doc docs/source/guide/Basics.lrad

  - id: "Integration tests"
    waitFor:
    - "Build"
    name: $_BUILD_IMAGE
    env: ['STACK_ROOT=/workspace/.stack']
    entrypoint: 'bash'
    args:
    - "-c"
    - |
      set -euxo pipefail

      export COMPOSE_FILE=test/docker-compose.yaml
      export RAD_BIN="$(stack path --docker --local-install-root)/bin"
      ls $RAD_BIN
      docker-compose up -d
      sleep 1 # Wait for containers to be started

      # Connect services to 'cloudbuild' network so they can be
      # accessed by other steps
      docker network connect cloudbuild test_ipfs-test-network_1 --alias ipfs-test-network
      docker network connect cloudbuild test_radicle-daemon1_1 --alias radicle-daemon1
      docker network connect cloudbuild test_radicle-daemon2_1 --alias radicle-daemon2
      docker exec test_ipfs-test-network_1 /app/wait-until-ready
      sleep 10
      # Add the empty entry to the IPFS test network. Radicle requires it
      echo '{"radicle": true}' | docker exec -i test_ipfs-test-network_1 ipfs dag put --pin

      export RADPATH="$(pwd)/rad"
      stack test :e2e

  - id: "Package"
    waitFor:
    - "Integration tests"
    name: $_BUILD_IMAGE
    env:
    - STACK_ROOT=/workspace/.stack
    - TAG_NAME=$TAG_NAME
    entrypoint: 'bash'
    args:
    - "-c"
    - |
      set -euxo pipefail
      if [[ "$TAG_NAME" == v* ]]; then
        VERSION="$TAG_NAME" TARGET=debian ./packaging/build-package.sh
        cp  \
          "packaging/out/radicle_${TAG_NAME}_amd64.deb" \
          "packaging/out/radicle_latest_amd64.deb"
        ./packaging/upload.sh
      fi

