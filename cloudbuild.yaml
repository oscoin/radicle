timeout: 3600s # Cache misses are slow to rebuild
steps:
  - id: "Load cache"
    name: gcr.io/cloud-builders/gsutil
    entrypoint: 'bash'
    args:
    - '-c'
    - |
      set -euxo pipefail

      source scripts/ci.sh
      load-cache

  - id: "Build deps"
    name: 'haskell:8.6.3'
    env: ['STACK_ROOT=/workspace/.stack']
    entrypoint: 'bash'
    args:
    - '-c'
    - |
      set -euxo pipefail

      stack config set system-ghc --global true
      stack config set install-ghc --global false

      stack build stylish-haskell hlint weeder

  - id: "Format"
    name: 'haskell:8.6.3'
    env: ['STACK_ROOT=/workspace/.stack']
    args: ['./scripts/check-fmt.sh']

  - id: "Lint"
    name: 'haskell:8.6.3'
    env: ['STACK_ROOT=/workspace/.stack']
    args: ['stack', 'exec', '--', 'hlint', '.']

  - id: "Build & Test"
    name: 'haskell:8.6.3'
    env: ['STACK_ROOT=/workspace/.stack']
    entrypoint: bash
    args:
    - '-c'
    - |
      set -euxo pipefail

      apt-get -qq update
      apt-get -yqq install libpq-dev
      stack build --fast --test --no-terminal --pedantic

      stack exec -- radicle test/prelude.rad

      ./images/radicle-server/ci-copy-bin.sh

  - id: "Lint (weeder)"
    waitFor: ["Build & Test"]
    name: 'haskell:8.6.3'
    env: ["STACK_ROOT=/workspace/.stack"]
    args: ["stack", "exec", "--", "weeder", "--match"]

  - id: "Build reference document"
    waitFor:
    - "Build & Test"
    name: 'haskell:8.6.3'
    env: ['STACK_ROOT=/workspace/.stack']
    entrypoint: bash
    args:
    - '-c'
    - |
      set -euxo pipefail

      mv docs/source/reference.rst oldref
      stack exec radicle-ref-doc
      if ! (diff oldref docs/source/reference.rst); then
        echo "Reference docs are not checked in"
        exit 1
      fi

  - id: "Check tutorial"
    waitFor:
    - "Build & Test"
    name: 'haskell:8.6.3'
    env: ['STACK_ROOT=/workspace/.stack']
    entrypoint: bash
    args:
    - '-c'
    - |
      set -euxo pipefail

      stack exec radicle-doc docs/source/guide/Basics.lrad

  - id: "Build radicle-server image"
    waitFor:
    - "Build & Test"
    name: 'gcr.io/cloud-builders/docker'
    entrypoint: bash
    env:
    - COMMIT_SHA=$COMMIT_SHA
    - BRANCH_NAME=$BRANCH_NAME
    args:
    - "-c"
    - |
      set -euxo pipefail

      image_name="eu.gcr.io/opensourcecoin/radicle-server"
      short_sha=$(echo "$COMMIT_SHA" | head --bytes=7)
      # Looks like this: b2018.12.06-a76a52f
      tag="b$(date +%Y.%m.%d)-${short_sha}"
      docker build \
        --tag "$image_name" \
        --cache-from "$image_name" \
        ./images/radicle-server

      if [ "$BRANCH_NAME" == "master" ]; then
        image_name="eu.gcr.io/opensourcecoin/radicle-server"
        short_sha=$(echo "$COMMIT_SHA" | head --bytes=7)
        # Looks like this: b2018.12.06-a76a52f
        tag="b$(date +%Y.%m.%d)-${short_sha}"
        docker tag "$image_name" "$image_name:$tag"
        docker push "$image_name"
        docker push "$image_name:$tag"
      fi

  - id: "Start and expose radicle-server"
    name: 'docker/compose:1.23.2'
    waitFor:
    - "Build radicle-server image"
    entrypoint: sh
    args:
    - "-c"
    - |
      cd images/radicle-server
      docker-compose up -d postgres
      sleep 5 # Wait for the DB to be ready
      docker-compose up -d
      docker network connect cloudbuild radicle-server_radicle-server_1 --alias radicle-server

  - id: "radicle-server integration test"
    waitFor:
    - "Start and expose radicle-server"
    name: 'haskell:8.6.3'
    env: ['STACK_ROOT=/workspace/.stack']
    entrypoint: 'bash'
    args:
    - "-c"
    - |
      set -euxo pipefail
      stack exec -- radicle - <<<'(load! "rad/examples/counter.rad") (counter/run-test)'
      stack exec -- radicle test/server.rad radicle-server

  - id: "Save cache"
    waitFor:
    - "Build & Test"
    name: gcr.io/cloud-builders/gsutil
    env:
    - BRANCH_NAME=$BRANCH_NAME
    entrypoint: 'bash'
    args:
    - '-c'
    - |
      set -euxo pipefail

      source scripts/ci.sh
      save-cache
