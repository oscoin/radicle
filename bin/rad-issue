#!/usr/bin/env radicle

(load! (find-module-file! "prelude.rad"))
(load! (find-module-file! "monadic/issue.rad"))
(load! (find-module-file! "monadic/project.rad"))
(load! (find-module-file! "prelude/io-utils.rad"))

(file-module! "prelude/error-messages.rad")
(import prelude/error-messages :as 'error)

(import prelude/validation :as 'validation)
(import prelude/machine :as 'machine)

(def machine-name (fn [] (get-rsm-of-type! :rad-issue)))

(def valid-states ["open" "closed"])

(def status-opts ["--filter-by-state" "--state" "-s"])

(def list-opts-help
  (string-append
    "[("
    (string/intercalate " | " status-opts)
    ") <state>] [--fancy]"))

(def help
  (string-append
  "rad issue - Radicle Issue CLI

   Usage:
        rad issue list " list-opts-help "
        rad issue new
        rad issue [show | close] <issue-number>
        rad issue comment <issue-number> <comment>
        rad issue help

     list         - Lists all issues
                    The list can be filtered by state:
                      " (string/intercalate ", " valid-states) "
                    The flags for filtering by state:
                      " (string/intercalate ", " status-opts) "
                    Filtering by multiple states is possible via '-s <state1> -s
                    <state2> ...'.
                    If the option '--fancy' is appended, the list is opened via
                    fzf (note that fzf has to be installed).
                    Unread issues are marked with a * before the timestamp.
     new          - Create a new issue in $EDITOR
     show         - Show an issue
     comment      - Add a comment to an issue
     close        - Close an issue
                    This command is restricted to the maintainer of the project.
     help         - Print this help and exit
       "))

(def cmd-parse-failure
  (fn [error]
    (parse-failure error help)))

(def comment-divider "---")

(def verify-issue-number
  (fn [issue-no machine]
    (match (lookup-default issue-no #f (list-issues machine))
      #f          (do
                    (put-str! (error/item-not-found :issue (show issue-no)))
                    (exit! 1))
      'the-issue  the-issue)))


(def add-comment-md
  (fn [x]
    (string-append
     "\n" comment-divider "\n"
     "---Add comment above the line.\n\n"
     x)))

(def pretty-state
  (fn [state]
    (drop 1 (show state))))

(def cells
  {:state       10
   :number      10
   :title       50
   :author      20
   :modified-at 22})

(def wrap-cell
  (fn [phrase cell-key]
    (def c-length (lookup cell-key cells))
    (string-append (take c-length (string/pad-right-to c-length phrase)) " ")))

(def pretty-table-header
  (fn []
    (string-append
      (wrap-cell "state" :state)
      (wrap-cell "#" :number)
      (wrap-cell "title" :title)
      (wrap-cell "author" :author)
      (wrap-cell "updated" :modified-at))))

(def pretty-modified-at
  (fn [i]
    (string-append (lookup :modified-at i)
                   (if (lookup :read? i) "  " " *"))))

(def pretty-headline
  (fn [i]
    (match i
      '{:number n
        :title tit
        :state s
        :username un}
      (string/unwords
        [(pretty-state s)
         (show n)
         tit
         un
         (pretty-modified-at i)]))))

(def pretty-row
  (fn [i]
    (match i
       '{:number n
        :title tit
        :state s
        :username un}
      (string-append
        (wrap-cell (pretty-state s) :state)
        (wrap-cell (show n) :number)
        (wrap-cell tit :title)
        (wrap-cell un :author)
        (wrap-cell (pretty-modified-at i) :modified-at)))))

(def pretty-comment
  "Markdown view of a comment. Assumes that the comment has been annotated with a
  username."
  (fn [c]
    (match c
      '{:username u-n
        :created-at c-a
        :body b}
      (string-append "### " u-n " [" c-a "]\n\n" b "\n"))))

(def pretty-issue
  "Markdown view of an issue. Assumes the issue and comments have been annotated
  with usernames."
  (fn [i]
    (match i
      '{:number n
        :title tit
        :body b
        :state state
        :labels ls
        :comments cs
        :username un
        :created-at c-a}
      (string-replace
       "\r"
       ""
       (string-append
        (pretty-headline i) "\n\n"
        "**State:** " (pretty-state state) "\n"
        "**Labels:** " (show ls) "\n\n"
        b "\n\n"
        "Comments\n"
        "--------\n\n"
        (string/unlines (map pretty-comment cs)))))))

(def add-username
  (fn [d]
    (def n (lookup-default :github-username (lookup-default :git-username "???" d) d))
    (insert :username n d)))

(def add-username-issue
  (fn [i]
    (add-username
     (insert :comments (map add-username (lookup :comments i)) i))))

(def enrich
  (fn [machine i]
    (insert :read? (newness/read-since-modified!? machine i) (add-username i))))

(def list-items
  "Lists the recent items and uses an editor to add a relevant comment."
  (fn [machine options]

    (def mk-key
      (fn [i]
        (if (lookup :fancy options)
          [(pretty-headline i) i]
          [(pretty-row i) i])))

    (def filt
      (match (map (fn [opt] (read (string-append ":" opt))) (lookup :state options))
        []      (fn [x] #t)
        'args   (fn [x] (elem? (lookup :state x) args))))

    (def items
      (map mk-key
          (map (fn [i] (enrich machine i))
               (filter filt
                       (reverse (values (list-issues machine)))))))

    (def items-dict (dict-from-seq items))
    (if (empty-seq? items)
      (put-str! "No issues!")
      (if (lookup :fancy options)
        (match (fzf-select-with-preview!
                 (map first items)
                 (fn [s] (pretty-issue (lookup s items-dict))))
               (/just 's)
               (do (def selected (lookup s items-dict))
                   (def issue-number (match selected {:number 'n} n))
                   (def pretty-item
                     (add-comment-md
                      (pretty-issue
                       (add-username-issue selected))))
                   (def edited-item (edit-in-editor! pretty-item))
                   (def added-comment
                     (string/unlines
                      (take-while (fn [x] (not (eq? x comment-divider)))
                                  (string/lines edited-item))))
                   (put-str!
                    (if (eq? added-comment "")
                      "Item was not updated."
                      (do (simple-add-comment! machine issue-number added-comment (get-git-username!))
                          (string-append "Sent comment: " added-comment)))))
               _ (put-str! "No selection made."))
        (do
          (put-str! (pretty-table-header))
          (map (fn [d] (put-str! (first d))) items))))))

(def show-issue!
  "Shows a single ISSUE `n`"
  (fn [n machine]
    (if (number? n)
      (if (integral? n)
        (do
          (def issue (verify-issue-number n machine))
          (put-str! (pretty-issue (enrich machine issue)))
          (newness/mark-read! machine machine))
        (cmd-parse-failure (error/whole-item-number :issue)))
      (cmd-parse-failure (error/missing-item-number :issue "show")))))

(def close-issue
  (fn [issue-number machine]
    (def n (read issue-number))
    (if (number? n)
      (if (integral? n)
        (catch 'daemon-error
               (do
                 (verify-issue-number n machine)
                 (simple-edit-issue! machine n {:state :closed})
                 (put-str! (string-append "Issue #" (show n) " has been closed."))
                 (newness/mark-read! machine n))
               (fn [_]
                 (put-str! (error/state-change-failure :issue "closed"))
                 (exit! 1)))
        (cmd-parse-failure (error/whole-item-number :issue)))
      (cmd-parse-failure (error/missing-item-number :issue "close")))))

(def create-comment!
  "Add a new `comment` to ISSUE."
  (fn [machine n comment]
    (if (number? n)
      (if (integral? n)
        (do
          (verify-issue-number n machine)
          (simple-add-comment! machine n comment (get-git-username!))
          (put-str! (string-append "Added comment to issue #" (show n)))
          (newness/mark-read! machine n))
        (cmd-parse-failure (error/whole-item-number :issue)))
    (cmd-parse-failure (error/missing-item-number :issue "comment on")))))

(def new-issue
  (fn [machine]
    (def template
";; Issue template. An empty or invalid value will abort.
{:title      \"Pick a title\"
 :body       \"Pick a body\"
 :labels     []
}
")
    (def i (read (edit-in-editor! template)))
    (def author {:git-username (get-git-username!)})
    (match (create-issue!  machine (simple-issue (<> i author)))
           ['n] (do (put-str! (string-append "Created issue #" (show n) " in " machine))
                    (newness/mark-read! machine n))
           _    (put-str! (error/no-number-returned :issue)))))

(def cmd-options
  [
    { :key :state :type :multi-opt :options ["-s" "--state" "--filter-by-state"] :possible-values valid-states :default []}
    { :key :fancy :type :flag :options ["--fancy"] :default #f }
  ])

(def /list-cmd
  (fn [opts]
    (/cmd-opts "list" opts cmd-options help)))

(def args (get-args!))

(machine/catch-daemon!
 (fn []
   (match args
          (/list-cmd 'options) (list-items (machine-name) options)
          (/cmd-0 "new" help) (new-issue (machine-name))
          (/cmd-1 "close" 'issue-number help) (close-issue issue-number (machine-name))
          (/cmd-1 "show" 'issue-number help) (show-issue! (read issue-number) (machine-name))
          (/cmd-2 "comment" 'issue-number 'comment help) (create-comment! (machine-name) (read issue-number) comment)
          ["help"] (put-str! help)
          ["-h"] (put-str! help)
          ["--help"] (put-str! help)
          (/cons 'cmd _) (cmd-parse-failure (error/unknown-command cmd))
          [] (put-str! help))))
