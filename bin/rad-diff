#!/usr/bin/env radicle

(load! (find-module-file! "prelude.rad"))
(load! (find-module-file! "monadic/diff.rad"))
(load! (find-module-file! "prelude/io-utils.rad"))
(load! (find-module-file! "monadic/project.rad"))

(file-module! "prelude/error-messages.rad")
(import prelude/error-messages :as 'error)

(import prelude/validation :as 'validation)

(def machine-name (fn [] (get-rsm-of-type! :rad-diff)))

(def valid-states
  ["pending" "retracted" "accepted" "rejected"])

(def status-opts ["-s" "--state" "--filter-by-state" ])

(def list-opts-help
  (string-append
    "[("
    (string/intercalate " | " status-opts)
    ") <state>] [--fancy]"))

(def help
  (string-append
  "rad diff - Radicle Diff CLI

   Usage:
        rad diff list " list-opts-help "
        rad diff propose <commit>
        rad diff [show | retract | accept | reject] <diff-number>
        rad diff comment <diff-number> <comment>
        rad diff help

     list         - Lists all diffs
                    The list can be filtered by state:
                      " (string/intercalate ", " valid-states) "
                    The flags for filtering by state:
                      " (string/intercalate ", " status-opts) "
                    Filtering by multiple states is possible via '-s <state1> -s
                    <state2> ...'.
                    If the option '--fancy' is appended, the list is opened via
                    fzf (note that fzf has to be installed).
     propose      - Create a new diff from a single commit
     show         - Show a diff
     comment      - Add a comment to a diff
     retract      - Retract your own diff
                    This command is restricted to the creator of the diff or the
                    maintainer of the project.
     accept       - Accept a diff
                    Automatically merges to master and pushes to origin. This
                    command is restricted to the maintainer of the project.
     reject       - Reject a diff
                    This command is restricted to the maintainer of the project.
     help         - Print this help and exit
  "))

(def cmd-parse-failure
  (fn [error]
    (parse-failure error help)))

(def verify-diff-number
  (fn [diff-no machine]
    (match (lookup-default diff-no #f (list-diffs machine))
      #f         (do
                   (put-str! (error/item-not-found :diff (show diff-no)))
                   (exit! 1))
      'the-diff  the-diff)))

;; git interactions

(def verify-commit
  (fn [commit]
    (match (process-with-stdout-stderr-exitcode! "git" ["show" commit] "")
      [_ _ :ok] commit
      _         (do
                  (put-str! (error/unknown-commit commit))
                  (exit! 1)))))

(def get-patch!
  (fn [commit]
    (string/unlines (process-with-stdout! "git" ["format-patch" "-1" commit "--stdout"] ""))))

(def get-title!
  (fn [commit]
    (get-git-commit-data! "%s" commit)))

(def get-description!
  (fn [commit]
    (get-git-commit-data! "%b" commit)))

(def get-author-name!
  (fn [commit]
    (get-git-commit-data! "%aN" commit)))

(def get-short-hash!
  (fn [commit]
    (string/unlines (process-with-stdout! "git" ["rev-parse" "--short" commit] ""))))

(def apply-patch!
  "Given a patch, apply it to the current branch"
  (fn [patch msg]
    (def file (unlines (shell-with-stdout! "mktemp" "")))
    (put-str! file)
    (write-file! file patch)
    (process-git-with-exit! ["am" file] msg)))

(def checkout-diff!
  "Creates a new branch diff/<DIFF-ID> based on the DIFF, and switches to it."
  (fn [machine diff-no]
    (def diff (verify-diff-number diff-no machine))
    (def diff-branch (string-append "diff/" (show diff-no)))
    (process-git-with-exit!
      ["checkout" "-b" diff-branch]
      (error/checkout-new-branch-failure diff-branch))
    (apply-patch!
      (lookup :patch diff)
      (error/applying-patch-failure))))

(def push-diff!
  "Merges the DIFF to master, and pushes the changes."
  (fn [machine diff-no]
    (def diff (verify-diff-number diff-no machine))
    (process-git-with-exit!
      ["checkout" "master"]
      (error/checkout-master-failure))
    (apply-patch!
      (lookup :patch diff)
      (error/applying-accepted-patch-failure))
    (process-git-with-exit!
      ["push"]
      (error/push-diff-failure))))

(def new-diff!
  "Creates a new diff on `machine` with a patch from the given `commit`."
  (fn [machine commit]
    (verify-commit commit)
    (def patch (get-patch! commit))
    (def author-name (get-author-name! commit))
    (def author-email (get-author-name! commit))
    (def short-hash (get-short-hash! commit))
    (def title (get-title! commit))
    (def description (get-description! commit))
    (def diff {:short-hash    short-hash
               :title         title
               :description   description
               :author-name   author-name
               :author-email  author-email
               :patch         patch})
    (match (simple-create-diff! machine diff)
           ['n] (put-str! (string-append "Proposing #" (show n)
                                         " to " machine))
           _    (put-str! (error/no-number-returned :diff)))))

;; showing diffs

(def pretty-state
  (fn [state]
    (drop 1 (show state))))

(def cells
  {:state       10
   :number      10
   :title       50
   :author      20
   :modified-at 20})

(def pad-to
 (fn [l x]
   (if (< l 1)
     ""
     (do
       (def pad (string/intercalate "" (map (fn [x] " ") (range 1 l))))
       (def x-length (length x))
       (if (> x-length (- l 1))
         (take l x)
         (string-append x (take (- l x-length) pad)))))))

(def wrap-cell
  (fn [phrase cell-key]
    (def c-length (lookup cell-key cells))
    (string-append (pad-to c-length phrase) " ")))

(def pretty-table-header
  (fn []
    (string-append
      (wrap-cell "state" :state)
      (wrap-cell "#" :number)
      (wrap-cell "commit" :title)
      (wrap-cell "author" :author)
      (wrap-cell "updated" :modified-at))))

(def pretty-headline
  (fn [i]
    (match i
      '{:number n
        :title tit
        :state s
        :author-name an
        :modified-at m-a}
      (string-append
        (pretty-state s) " "
        (show n) " "
        tit " "
        an " "
        m-a " "))))

(def pretty-row
  (fn [i]
    (match i
      '{:number n
        :title tit
        :state s
        :author-name an
        :modified-at m-a}
      (string-append
        (wrap-cell (pretty-state s) :state)
        (wrap-cell (show n) :number)
        (wrap-cell tit :title)
        (wrap-cell an :author)
        (wrap-cell m-a :modified-at)))))

(def pretty-comment
 (fn [c]
   (match c
     '{:created-at c-a
       :body b
       :author-name a-n}
     (string-append "### " a-n " [" c-a "]\n\n" b "\n"))))

(def pretty-diff
  (fn [i]
    (match i
      '{:patch p
        :created-at c-a
        :comments cs}
      (string-append
        (pretty-headline i) "\n\n"
        p "\n\n"
        "Comments\n"
        "--------\n\n"
        (string/unlines (map pretty-comment cs))))))

(def comment-divider "----------------------------------------")

(def add-comment-md
  (fn [x]
    (string-append
     "\n" comment-divider "\n"
     "---Add comment above the line.\n\n"
     x)))

(def list-items
  "Lists all diffs and filters them by `options`. If `--new` is passed as an
  option only recent items are shown. If `--fancy is passed, the list is opened
  via fzf."
  (fn [machine options]

    (def mk-key
      (fn [diff]
        (if (lookup :fancy options)
          [(pretty-headline diff) diff]
          [(pretty-row diff) diff])))

    (def filt
      (match (map (fn [opt] (read (string-append ":" opt))) (lookup :state options))
        []      (fn [x] #t)
        'args   (fn [x] (elem? (lookup :state x) args))))

  (def items
    (map mk-key
      (filter filt
        (reverse (values (list-diffs machine))))))

    (def items-dict (dict-from-seq items))
    (if (empty-seq? items)
      (put-str! "No diffs!")
      (if (lookup :fancy options)
        (match (fzf-select-with-preview!
                 (map first items)
                 (fn [s] (pretty-diff (lookup s items-dict))))
               (/just 's)
               (do (def selected (lookup s items-dict))
                   (def diff-number (match selected {:number 'n} n))
                   (def pretty-item
                     (add-comment-md
                       (pretty-diff selected)))
                   (def edited-item (edit-in-editor! pretty-item))
                   (def added-comment
                     (string/unlines
                      (take-while (fn [x] (not (eq? x comment-divider)))
                                  (string/lines edited-item))))
                   (put-str!
                    (if (eq? added-comment "")
                      "Item was not updated."
                      (do (simple-add-comment! machine diff-number added-comment (get-git-username!))
                          (string-append "Sent comment: " added-comment)))))
               _ (put-str! "No selection made."))
         (do
           (put-str! (pretty-table-header))
           (map (fn [d] (put-str! (first d))) items))))))

(def show-diff!
  "Shows a single DIFF `n`"
  (fn [machine n]
    (if (number? n)
      (if (integral? n)
        (do
          (def diff (verify-diff-number n machine))
          (put-str! (pretty-diff diff)))
        (cmd-parse-failure (error/whole-item-number :diff)))
      (cmd-parse-failure (error/missing-item-number :diff "show")))))

(def edit-diff-state!
  "Edit the state of a DIFF. If the new state is `:accepted` the DIFF is then
  also merged to master and the changes pushed."
  (fn [machine n new-state]
    (if (number? n)
      (if (integral? n)
        (do
          (def edit-state-with-feedback!
            (fn [message]
              (catch 'daemon-error
                (simple-edit-diff! machine n {:state new-state})
                (fn [x]
                   (put-str!
                     (error/state-change-failure :diff (pretty-state new-state)))
                   (exit! 1)))
              (put-str! message)))
          (verify-diff-number n machine)
          (if (eq? new-state :accepted)
            (match (push-diff! machine n)
              :ok (edit-state-with-feedback!
                    (string-append "Diff " (show n) " has been " (pretty-state new-state) " and merged."))
              _   (exit! 1))
            (edit-state-with-feedback!
              (string-append "Diff " (show n) " has been " (pretty-state new-state)))))
        (cmd-parse-failure (error/whole-item-number :diff)))
    (cmd-parse-failure (error/missing-item-number :issue "change the state of")))))

(def create-comment!
  "Add a new `comment` to DIFF."
  (fn [machine n comment]
    (if (number? n)
      (if (integral? n)
        (do
          (verify-diff-number n machine)
          (simple-add-comment! machine n comment (get-git-username!))
          (put-str! (string-append "Added comment to Diff " (show n))))
        (cmd-parse-failure (error/whole-item-number :diff)))
    (cmd-parse-failure (error/missing-item-number :issue "comment on")))))

(def cmd-options
  [
    { :key :state :type :multi-opt :options status-opts :possible-values valid-states :default []}
    { :key :fancy :type :flag :options ["--fancy"] :default #f }
  ])

(def /list-cmd
  (fn [opts]
    (/cmd-opts "list" opts cmd-options help)))

(def args (get-args!))

(machine/catch-daemon!
 (fn []
   (match args
          (/list-cmd 'options) (list-items (machine-name) options)
          (/cmd-1 "propose" 'commit help) (new-diff! (machine-name) commit)
          (/cmd-1 "checkout" 'diff-number help) (checkout-diff! (machine-name) (read diff-number))
          (/cmd-1 "show" 'diff-number help) (show-diff! (machine-name) (read diff-number))
          (/cmd-1 "retract" 'diff-number help) (edit-diff-state! (machine-name) (read diff-number) :retracted)
          (/cmd-1 "accept" 'diff-number help) (edit-diff-state! (machine-name) (read diff-number) :accepted)
          (/cmd-1 "reject" 'diff-number help) (edit-diff-state! (machine-name) (read diff-number) :rejected)
          (/cmd-2 "comment" 'diff-number 'comment help) (create-comment! (machine-name) (read diff-number) comment)
          (/cmd-0 "create-machine" help) (new-diff-machine! (machine-name))
          ["help"] (put-str! help)
          ["-h"] (put-str! help)
          ["--help"] (put-str! help)
          (/cons 'cmd _) (cmd-parse-failure (error/unknown-command cmd))
          [] (put-str! help))))
