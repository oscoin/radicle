#!/usr/bin/env radicle

(load! "rad/prelude.rad")
(load! "rad/monadic/issues.rad")
(load! "rad/prelude/io-utils.rad")

(def base-name "http://machines.radicle.xyz/chains/")

(def name-base "http://machines.radicle.xyz/chains/names")

(def help
  (string-append
  "rad-issues - Radicle issue CLI

   Usage:
        rad-issues [list|new|create-chain] <chain-name>
        rad-issues make-key <nick>
        rad-issues names
        rad-issues help

     list         - Select from all issues to view or comment on
     new          - Create a new issue in $EDITOR
     create-chain - Create a new issues chain
     make-key     - Create a key-pair and register the name
     names        - See all registered names
     help         - Print this help and exit

   If <chain-name> begins with 'http://', that URL will be used. Otherwise,
  " base-name " will be prepended to <chain-name>." ))

(def make-name
  (fn [chain]
    (if (eq? (take 7 chain) "http://")
        chain
        (string-append base-name chain))))

(def make-chain-ref
  (fn [chain]
    (ref (chain/load-chain! (make-name chain)))))

(def list-issues
  (fn [chain]
    (def chain-ref (make-chain-ref chain))
    (load! "rad/monadic/names.rad")
    (def names (ref (chain/load-chain! name-base)))
    (def mk-key (fn [v]
      (match v
        ['key 'val] [(string-append (show key) " - " (lookup :title val)) val])))
    (def iss (dict-from-seq (map mk-key (seq (list-issues chain-ref)))))
    (def selected (fzf-select-by-key! iss))
    (def comment-divider "---")
    (def username
      (fn [d]
        (catch
          'any
          (lookup :github-username d)
          (fn [x]
            (match (lookup-key names (lookup :author d))
              :nothing "???"
              'name    name)))))
    (def issue-number (fn [d] (lookup :number d)))
    (def body (fn [d] (lookup :body d)))
    (def pretty-comment (fn [c]
      (string-append
        "### " (username c) " [" (lookup :created-at c) "]\n\n"
        (body c) "\n")))
    (def pretty-issue (fn [i]
      (string-replace "\r" "" (string-append
         "\n" comment-divider "\n"
         "---Add comment above the line.\n\n"
         "# Issue " (show (issue-number i)) ": " (lookup :title i) "\n\n"
         "**State:** " (if (eq? (lookup :state i) :open) "open" "closed") "\n"
         "**Labels:** " (show (lookup :labels i)) "\n\n"
         (body i) "\n\n"
         "Comments\n"
         "--------\n\n"
         (string/unlines (map pretty-comment (lookup :comments i)))
    ))))
    (def edited-issue (edit-in-editor! (pretty-issue selected)))
    (def extract-comment
      (fn [xs]
        (string/unlines (take-while (fn [x] (not (eq? x comment-divider))) (string/lines xs)))))
    (def send-comment
      (fn [xs]
        (def comment (extract-comment edited-issue))
        (if (eq? comment "")
          "Issue was not updated."
          (do (simple-add-comment! chain-ref (issue-number selected) comment)
            (string-append "Sent comment: " comment)))))
    (put-str! (send-comment edited-issue))))

(def new-issue
  (fn [chain]
    (def chain-ref (make-chain-ref chain))
    (def template
";; Issue template. An empty or invalid value will abort.
{:title      \"Pick a title\"
 :body       \"Pick a body\"
 :labels     []
}
")
    (def iss (read (edit-in-editor! template)))
    (create-issue!
         chain-ref
         (<> iss {:state :open :comments [] :created-at (now!)}))))

(def create-chain
  (fn [chain]
    (create-issues-chain! (make-name chain))))

(def make-key
  (fn [name]
    (def kp (gen-key-pair! (default-ecc-curve)))
    (write-file! "my-keys.rad" (show kp))
    (load! "rad/monadic/names.rad")
    (add-name! name-base name (lookup :public-key kp))))

(def names
  (fn []
    (load! "rad/monadic/names.rad")
    (print! (list-names name-base))))

(def args (get-args!))
(match args
  ["list" 'chain]         (list-issues chain)
  ["names"]               (names)
  ["make-key" 'name]      (make-key name)
  ["new"  'chain]         (new-issue chain)
  ["create-chain" 'chain] (create-chain chain)
  ["help"]                (put-str! help)
  _                       (do
                            (put-str! (string-append "Unrecognized command" (show args)))
                            (put-str! help)))
